
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model categorias
 * 
 */
export type categorias = $Result.DefaultSelection<Prisma.$categoriasPayload>
/**
 * Model cards
 * 
 */
export type cards = $Result.DefaultSelection<Prisma.$cardsPayload>
/**
 * Model expenses
 * 
 */
export type expenses = $Result.DefaultSelection<Prisma.$expensesPayload>
/**
 * Model expense_history
 * 
 */
export type expense_history = $Result.DefaultSelection<Prisma.$expense_historyPayload>
/**
 * Model incomes
 * 
 */
export type incomes = $Result.DefaultSelection<Prisma.$incomesPayload>
/**
 * Model investimentos
 * 
 */
export type investimentos = $Result.DefaultSelection<Prisma.$investimentosPayload>
/**
 * Model thresholds
 * 
 */
export type thresholds = $Result.DefaultSelection<Prisma.$thresholdsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.categoriasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cards`: Exposes CRUD operations for the **cards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.cards.findMany()
    * ```
    */
  get cards(): Prisma.cardsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenses`: Exposes CRUD operations for the **expenses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expenses.findMany()
    * ```
    */
  get expenses(): Prisma.expensesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense_history`: Exposes CRUD operations for the **expense_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expense_histories
    * const expense_histories = await prisma.expense_history.findMany()
    * ```
    */
  get expense_history(): Prisma.expense_historyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.incomes`: Exposes CRUD operations for the **incomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Incomes
    * const incomes = await prisma.incomes.findMany()
    * ```
    */
  get incomes(): Prisma.incomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.investimentos`: Exposes CRUD operations for the **investimentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investimentos
    * const investimentos = await prisma.investimentos.findMany()
    * ```
    */
  get investimentos(): Prisma.investimentosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thresholds`: Exposes CRUD operations for the **thresholds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thresholds
    * const thresholds = await prisma.thresholds.findMany()
    * ```
    */
  get thresholds(): Prisma.thresholdsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    categorias: 'categorias',
    cards: 'cards',
    expenses: 'expenses',
    expense_history: 'expense_history',
    incomes: 'incomes',
    investimentos: 'investimentos',
    thresholds: 'thresholds'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "categorias" | "cards" | "expenses" | "expense_history" | "incomes" | "investimentos" | "thresholds"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      categorias: {
        payload: Prisma.$categoriasPayload<ExtArgs>
        fields: Prisma.categoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findFirst: {
            args: Prisma.categoriasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          findMany: {
            args: Prisma.categoriasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          create: {
            args: Prisma.categoriasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          createMany: {
            args: Prisma.categoriasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.categoriasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          delete: {
            args: Prisma.categoriasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          update: {
            args: Prisma.categoriasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          deleteMany: {
            args: Prisma.categoriasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.categoriasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>[]
          }
          upsert: {
            args: Prisma.categoriasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.categoriasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriasCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      cards: {
        payload: Prisma.$cardsPayload<ExtArgs>
        fields: Prisma.cardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cardsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cardsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          findFirst: {
            args: Prisma.cardsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cardsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          findMany: {
            args: Prisma.cardsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>[]
          }
          create: {
            args: Prisma.cardsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          createMany: {
            args: Prisma.cardsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cardsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>[]
          }
          delete: {
            args: Prisma.cardsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          update: {
            args: Prisma.cardsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          deleteMany: {
            args: Prisma.cardsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cardsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.cardsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>[]
          }
          upsert: {
            args: Prisma.cardsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cardsPayload>
          }
          aggregate: {
            args: Prisma.CardsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCards>
          }
          groupBy: {
            args: Prisma.cardsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.cardsCountArgs<ExtArgs>
            result: $Utils.Optional<CardsCountAggregateOutputType> | number
          }
        }
      }
      expenses: {
        payload: Prisma.$expensesPayload<ExtArgs>
        fields: Prisma.expensesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.expensesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.expensesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          findFirst: {
            args: Prisma.expensesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.expensesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          findMany: {
            args: Prisma.expensesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>[]
          }
          create: {
            args: Prisma.expensesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          createMany: {
            args: Prisma.expensesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.expensesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>[]
          }
          delete: {
            args: Prisma.expensesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          update: {
            args: Prisma.expensesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          deleteMany: {
            args: Prisma.expensesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.expensesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.expensesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>[]
          }
          upsert: {
            args: Prisma.expensesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensesPayload>
          }
          aggregate: {
            args: Prisma.ExpensesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenses>
          }
          groupBy: {
            args: Prisma.expensesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpensesGroupByOutputType>[]
          }
          count: {
            args: Prisma.expensesCountArgs<ExtArgs>
            result: $Utils.Optional<ExpensesCountAggregateOutputType> | number
          }
        }
      }
      expense_history: {
        payload: Prisma.$expense_historyPayload<ExtArgs>
        fields: Prisma.expense_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.expense_historyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.expense_historyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          findFirst: {
            args: Prisma.expense_historyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.expense_historyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          findMany: {
            args: Prisma.expense_historyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>[]
          }
          create: {
            args: Prisma.expense_historyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          createMany: {
            args: Prisma.expense_historyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.expense_historyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>[]
          }
          delete: {
            args: Prisma.expense_historyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          update: {
            args: Prisma.expense_historyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          deleteMany: {
            args: Prisma.expense_historyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.expense_historyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.expense_historyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>[]
          }
          upsert: {
            args: Prisma.expense_historyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expense_historyPayload>
          }
          aggregate: {
            args: Prisma.Expense_historyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense_history>
          }
          groupBy: {
            args: Prisma.expense_historyGroupByArgs<ExtArgs>
            result: $Utils.Optional<Expense_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.expense_historyCountArgs<ExtArgs>
            result: $Utils.Optional<Expense_historyCountAggregateOutputType> | number
          }
        }
      }
      incomes: {
        payload: Prisma.$incomesPayload<ExtArgs>
        fields: Prisma.incomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.incomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.incomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          findFirst: {
            args: Prisma.incomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.incomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          findMany: {
            args: Prisma.incomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>[]
          }
          create: {
            args: Prisma.incomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          createMany: {
            args: Prisma.incomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.incomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>[]
          }
          delete: {
            args: Prisma.incomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          update: {
            args: Prisma.incomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          deleteMany: {
            args: Prisma.incomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.incomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.incomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>[]
          }
          upsert: {
            args: Prisma.incomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incomesPayload>
          }
          aggregate: {
            args: Prisma.IncomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncomes>
          }
          groupBy: {
            args: Prisma.incomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<IncomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.incomesCountArgs<ExtArgs>
            result: $Utils.Optional<IncomesCountAggregateOutputType> | number
          }
        }
      }
      investimentos: {
        payload: Prisma.$investimentosPayload<ExtArgs>
        fields: Prisma.investimentosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.investimentosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.investimentosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          findFirst: {
            args: Prisma.investimentosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.investimentosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          findMany: {
            args: Prisma.investimentosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>[]
          }
          create: {
            args: Prisma.investimentosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          createMany: {
            args: Prisma.investimentosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.investimentosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>[]
          }
          delete: {
            args: Prisma.investimentosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          update: {
            args: Prisma.investimentosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          deleteMany: {
            args: Prisma.investimentosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.investimentosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.investimentosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>[]
          }
          upsert: {
            args: Prisma.investimentosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$investimentosPayload>
          }
          aggregate: {
            args: Prisma.InvestimentosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvestimentos>
          }
          groupBy: {
            args: Prisma.investimentosGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvestimentosGroupByOutputType>[]
          }
          count: {
            args: Prisma.investimentosCountArgs<ExtArgs>
            result: $Utils.Optional<InvestimentosCountAggregateOutputType> | number
          }
        }
      }
      thresholds: {
        payload: Prisma.$thresholdsPayload<ExtArgs>
        fields: Prisma.thresholdsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thresholdsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thresholdsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          findFirst: {
            args: Prisma.thresholdsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thresholdsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          findMany: {
            args: Prisma.thresholdsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>[]
          }
          create: {
            args: Prisma.thresholdsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          createMany: {
            args: Prisma.thresholdsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.thresholdsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>[]
          }
          delete: {
            args: Prisma.thresholdsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          update: {
            args: Prisma.thresholdsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          deleteMany: {
            args: Prisma.thresholdsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.thresholdsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.thresholdsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>[]
          }
          upsert: {
            args: Prisma.thresholdsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thresholdsPayload>
          }
          aggregate: {
            args: Prisma.ThresholdsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThresholds>
          }
          groupBy: {
            args: Prisma.thresholdsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThresholdsGroupByOutputType>[]
          }
          count: {
            args: Prisma.thresholdsCountArgs<ExtArgs>
            result: $Utils.Optional<ThresholdsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    categorias?: categoriasOmit
    cards?: cardsOmit
    expenses?: expensesOmit
    expense_history?: expense_historyOmit
    incomes?: incomesOmit
    investimentos?: investimentosOmit
    thresholds?: thresholdsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    expenses: number
    incomes: number
    investments: number
    categorias: number
    cards: number
    expense_history: number
    thresholds: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenses?: boolean | UsersCountOutputTypeCountExpensesArgs
    incomes?: boolean | UsersCountOutputTypeCountIncomesArgs
    investments?: boolean | UsersCountOutputTypeCountInvestmentsArgs
    categorias?: boolean | UsersCountOutputTypeCountCategoriasArgs
    cards?: boolean | UsersCountOutputTypeCountCardsArgs
    expense_history?: boolean | UsersCountOutputTypeCountExpense_historyArgs
    thresholds?: boolean | UsersCountOutputTypeCountThresholdsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expensesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountIncomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: incomesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountInvestmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: investimentosWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cardsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountExpense_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expense_historyWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountThresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thresholdsWhereInput
  }


  /**
   * Count Type CategoriasCountOutputType
   */

  export type CategoriasCountOutputType = {
    children: number
    expenses: number
    incomes: number
    thresholds: number
  }

  export type CategoriasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoriasCountOutputTypeCountChildrenArgs
    expenses?: boolean | CategoriasCountOutputTypeCountExpensesArgs
    incomes?: boolean | CategoriasCountOutputTypeCountIncomesArgs
    thresholds?: boolean | CategoriasCountOutputTypeCountThresholdsArgs
  }

  // Custom InputTypes
  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriasCountOutputType
     */
    select?: CategoriasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expensesWhereInput
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountIncomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: incomesWhereInput
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountThresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thresholdsWhereInput
  }


  /**
   * Count Type CardsCountOutputType
   */

  export type CardsCountOutputType = {
    expenses: number
  }

  export type CardsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenses?: boolean | CardsCountOutputTypeCountExpensesArgs
  }

  // Custom InputTypes
  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardsCountOutputType
     */
    select?: CardsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardsCountOutputType without action
   */
  export type CardsCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expensesWhereInput
  }


  /**
   * Count Type ExpensesCountOutputType
   */

  export type ExpensesCountOutputType = {
    history: number
  }

  export type ExpensesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | ExpensesCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * ExpensesCountOutputType without action
   */
  export type ExpensesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExpensesCountOutputType
     */
    select?: ExpensesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExpensesCountOutputType without action
   */
  export type ExpensesCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expense_historyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    password: string | null
    currency: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    password: string | null
    currency: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    password: number
    currency: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    currency?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    currency?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    currency?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    nome: string
    email: string
    password: string
    currency: string
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    currency?: boolean
    expenses?: boolean | users$expensesArgs<ExtArgs>
    incomes?: boolean | users$incomesArgs<ExtArgs>
    investments?: boolean | users$investmentsArgs<ExtArgs>
    categorias?: boolean | users$categoriasArgs<ExtArgs>
    cards?: boolean | users$cardsArgs<ExtArgs>
    expense_history?: boolean | users$expense_historyArgs<ExtArgs>
    thresholds?: boolean | users$thresholdsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    currency?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    currency?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    currency?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "password" | "currency", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenses?: boolean | users$expensesArgs<ExtArgs>
    incomes?: boolean | users$incomesArgs<ExtArgs>
    investments?: boolean | users$investmentsArgs<ExtArgs>
    categorias?: boolean | users$categoriasArgs<ExtArgs>
    cards?: boolean | users$cardsArgs<ExtArgs>
    expense_history?: boolean | users$expense_historyArgs<ExtArgs>
    thresholds?: boolean | users$thresholdsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      expenses: Prisma.$expensesPayload<ExtArgs>[]
      incomes: Prisma.$incomesPayload<ExtArgs>[]
      investments: Prisma.$investimentosPayload<ExtArgs>[]
      categorias: Prisma.$categoriasPayload<ExtArgs>[]
      cards: Prisma.$cardsPayload<ExtArgs>[]
      expense_history: Prisma.$expense_historyPayload<ExtArgs>[]
      thresholds: Prisma.$thresholdsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      password: string
      currency: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    expenses<T extends users$expensesArgs<ExtArgs> = {}>(args?: Subset<T, users$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incomes<T extends users$incomesArgs<ExtArgs> = {}>(args?: Subset<T, users$incomesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    investments<T extends users$investmentsArgs<ExtArgs> = {}>(args?: Subset<T, users$investmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categorias<T extends users$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, users$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cards<T extends users$cardsArgs<ExtArgs> = {}>(args?: Subset<T, users$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expense_history<T extends users$expense_historyArgs<ExtArgs> = {}>(args?: Subset<T, users$expense_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    thresholds<T extends users$thresholdsArgs<ExtArgs> = {}>(args?: Subset<T, users$thresholdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly nome: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly currency: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.expenses
   */
  export type users$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    where?: expensesWhereInput
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    cursor?: expensesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * users.incomes
   */
  export type users$incomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    where?: incomesWhereInput
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    cursor?: incomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncomesScalarFieldEnum | IncomesScalarFieldEnum[]
  }

  /**
   * users.investments
   */
  export type users$investmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    where?: investimentosWhereInput
    orderBy?: investimentosOrderByWithRelationInput | investimentosOrderByWithRelationInput[]
    cursor?: investimentosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvestimentosScalarFieldEnum | InvestimentosScalarFieldEnum[]
  }

  /**
   * users.categorias
   */
  export type users$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    cursor?: categoriasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * users.cards
   */
  export type users$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    where?: cardsWhereInput
    orderBy?: cardsOrderByWithRelationInput | cardsOrderByWithRelationInput[]
    cursor?: cardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * users.expense_history
   */
  export type users$expense_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    where?: expense_historyWhereInput
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    cursor?: expense_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Expense_historyScalarFieldEnum | Expense_historyScalarFieldEnum[]
  }

  /**
   * users.thresholds
   */
  export type users$thresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    where?: thresholdsWhereInput
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    cursor?: thresholdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThresholdsScalarFieldEnum | ThresholdsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model categorias
   */

  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasMinAggregateOutputType = {
    id: string | null
    nome: string | null
    cor: string | null
    tipo: string | null
    parent_id: string | null
    user_id: string | null
  }

  export type CategoriasMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    cor: string | null
    tipo: string | null
    parent_id: string | null
    user_id: string | null
  }

  export type CategoriasCountAggregateOutputType = {
    id: number
    nome: number
    cor: number
    tipo: number
    parent_id: number
    user_id: number
    _all: number
  }


  export type CategoriasMinAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    tipo?: true
    parent_id?: true
    user_id?: true
  }

  export type CategoriasMaxAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    tipo?: true
    parent_id?: true
    user_id?: true
  }

  export type CategoriasCountAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    tipo?: true
    parent_id?: true
    user_id?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to aggregate.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type categoriasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithAggregationInput | categoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: categoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }

  export type CategoriasGroupByOutputType = {
    id: string
    nome: string
    cor: string
    tipo: string
    parent_id: string | null
    user_id: string
    _count: CategoriasCountAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends categoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type categoriasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    tipo?: boolean
    parent_id?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
    children?: boolean | categorias$childrenArgs<ExtArgs>
    expenses?: boolean | categorias$expensesArgs<ExtArgs>
    incomes?: boolean | categorias$incomesArgs<ExtArgs>
    thresholds?: boolean | categorias$thresholdsArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    tipo?: boolean
    parent_id?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    tipo?: boolean
    parent_id?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectScalar = {
    id?: boolean
    nome?: boolean
    cor?: boolean
    tipo?: boolean
    parent_id?: boolean
    user_id?: boolean
  }

  export type categoriasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "cor" | "tipo" | "parent_id" | "user_id", ExtArgs["result"]["categorias"]>
  export type categoriasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
    children?: boolean | categorias$childrenArgs<ExtArgs>
    expenses?: boolean | categorias$expensesArgs<ExtArgs>
    incomes?: boolean | categorias$incomesArgs<ExtArgs>
    thresholds?: boolean | categorias$thresholdsArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type categoriasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
  }
  export type categoriasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | categorias$parentArgs<ExtArgs>
  }

  export type $categoriasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categorias"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      parent: Prisma.$categoriasPayload<ExtArgs> | null
      children: Prisma.$categoriasPayload<ExtArgs>[]
      expenses: Prisma.$expensesPayload<ExtArgs>[]
      incomes: Prisma.$incomesPayload<ExtArgs>[]
      thresholds: Prisma.$thresholdsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      cor: string
      tipo: string
      parent_id: string | null
      user_id: string
    }, ExtArgs["result"]["categorias"]>
    composites: {}
  }

  type categoriasGetPayload<S extends boolean | null | undefined | categoriasDefaultArgs> = $Result.GetResult<Prisma.$categoriasPayload, S>

  type categoriasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<categoriasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface categoriasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categorias'], meta: { name: 'categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {categoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriasFindUniqueArgs>(args: SelectSubset<T, categoriasFindUniqueArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categorias that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {categoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriasFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriasFindFirstArgs>(args?: SelectSubset<T, categoriasFindFirstArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriasFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriasFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriasWithIdOnly = await prisma.categorias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoriasFindManyArgs>(args?: SelectSubset<T, categoriasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categorias.
     * @param {categoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
     */
    create<T extends categoriasCreateArgs>(args: SelectSubset<T, categoriasCreateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categorias.
     * @param {categoriasCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriasCreateManyArgs>(args?: SelectSubset<T, categoriasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorias and returns the data saved in the database.
     * @param {categoriasCreateManyAndReturnArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categorias = await prisma.categorias.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorias and only return the `id`
     * const categoriasWithIdOnly = await prisma.categorias.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends categoriasCreateManyAndReturnArgs>(args?: SelectSubset<T, categoriasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categorias.
     * @param {categoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
     */
    delete<T extends categoriasDeleteArgs>(args: SelectSubset<T, categoriasDeleteArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categorias.
     * @param {categoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriasUpdateArgs>(args: SelectSubset<T, categoriasUpdateArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categorias.
     * @param {categoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriasDeleteManyArgs>(args?: SelectSubset<T, categoriasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriasUpdateManyArgs>(args: SelectSubset<T, categoriasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias and returns the data updated in the database.
     * @param {categoriasUpdateManyAndReturnArgs} args - Arguments to update many Categorias.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categorias and only return the `id`
     * const categoriasWithIdOnly = await prisma.categorias.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends categoriasUpdateManyAndReturnArgs>(args: SelectSubset<T, categoriasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categorias.
     * @param {categoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
     */
    upsert<T extends categoriasUpsertArgs>(args: SelectSubset<T, categoriasUpsertArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriasCountArgs>(
      args?: Subset<T, categoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriasGroupByArgs['orderBy'] }
        : { orderBy?: categoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categorias model
   */
  readonly fields: categoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends categorias$parentArgs<ExtArgs> = {}>(args?: Subset<T, categorias$parentArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends categorias$childrenArgs<ExtArgs> = {}>(args?: Subset<T, categorias$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends categorias$expensesArgs<ExtArgs> = {}>(args?: Subset<T, categorias$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incomes<T extends categorias$incomesArgs<ExtArgs> = {}>(args?: Subset<T, categorias$incomesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    thresholds<T extends categorias$thresholdsArgs<ExtArgs> = {}>(args?: Subset<T, categorias$thresholdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categorias model
   */
  interface categoriasFieldRefs {
    readonly id: FieldRef<"categorias", 'String'>
    readonly nome: FieldRef<"categorias", 'String'>
    readonly cor: FieldRef<"categorias", 'String'>
    readonly tipo: FieldRef<"categorias", 'String'>
    readonly parent_id: FieldRef<"categorias", 'String'>
    readonly user_id: FieldRef<"categorias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categorias findUnique
   */
  export type categoriasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findUniqueOrThrow
   */
  export type categoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias findFirst
   */
  export type categoriasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findFirstOrThrow
   */
  export type categoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias findMany
   */
  export type categoriasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias create
   */
  export type categoriasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to create a categorias.
     */
    data: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
  }

  /**
   * categorias createMany
   */
  export type categoriasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categorias createManyAndReturn
   */
  export type categoriasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * categorias update
   */
  export type categoriasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to update a categorias.
     */
    data: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
    /**
     * Choose, which categorias to update.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias updateMany
   */
  export type categoriasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriasWhereInput
    /**
     * Limit how many categorias to update.
     */
    limit?: number
  }

  /**
   * categorias updateManyAndReturn
   */
  export type categoriasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriasWhereInput
    /**
     * Limit how many categorias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * categorias upsert
   */
  export type categoriasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The filter to search for the categorias to update in case it exists.
     */
    where: categoriasWhereUniqueInput
    /**
     * In case the categorias found by the `where` argument doesn't exist, create a new categorias with this data.
     */
    create: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
    /**
     * In case the categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
  }

  /**
   * categorias delete
   */
  export type categoriasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter which categorias to delete.
     */
    where: categoriasWhereUniqueInput
  }

  /**
   * categorias deleteMany
   */
  export type categoriasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriasWhereInput
    /**
     * Limit how many categorias to delete.
     */
    limit?: number
  }

  /**
   * categorias.parent
   */
  export type categorias$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
  }

  /**
   * categorias.children
   */
  export type categorias$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    cursor?: categoriasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * categorias.expenses
   */
  export type categorias$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    where?: expensesWhereInput
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    cursor?: expensesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * categorias.incomes
   */
  export type categorias$incomesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    where?: incomesWhereInput
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    cursor?: incomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncomesScalarFieldEnum | IncomesScalarFieldEnum[]
  }

  /**
   * categorias.thresholds
   */
  export type categorias$thresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    where?: thresholdsWhereInput
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    cursor?: thresholdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThresholdsScalarFieldEnum | ThresholdsScalarFieldEnum[]
  }

  /**
   * categorias without action
   */
  export type categoriasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
  }


  /**
   * Model cards
   */

  export type AggregateCards = {
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  export type CardsAvgAggregateOutputType = {
    limite: number | null
    dia_vencimento: number | null
  }

  export type CardsSumAggregateOutputType = {
    limite: number | null
    dia_vencimento: number | null
  }

  export type CardsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    nome: string | null
    tipo: string | null
    numero: string | null
    cor: string | null
    limite: number | null
    dia_vencimento: number | null
  }

  export type CardsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    nome: string | null
    tipo: string | null
    numero: string | null
    cor: string | null
    limite: number | null
    dia_vencimento: number | null
  }

  export type CardsCountAggregateOutputType = {
    id: number
    user_id: number
    nome: number
    tipo: number
    numero: number
    cor: number
    limite: number
    dia_vencimento: number
    _all: number
  }


  export type CardsAvgAggregateInputType = {
    limite?: true
    dia_vencimento?: true
  }

  export type CardsSumAggregateInputType = {
    limite?: true
    dia_vencimento?: true
  }

  export type CardsMinAggregateInputType = {
    id?: true
    user_id?: true
    nome?: true
    tipo?: true
    numero?: true
    cor?: true
    limite?: true
    dia_vencimento?: true
  }

  export type CardsMaxAggregateInputType = {
    id?: true
    user_id?: true
    nome?: true
    tipo?: true
    numero?: true
    cor?: true
    limite?: true
    dia_vencimento?: true
  }

  export type CardsCountAggregateInputType = {
    id?: true
    user_id?: true
    nome?: true
    tipo?: true
    numero?: true
    cor?: true
    limite?: true
    dia_vencimento?: true
    _all?: true
  }

  export type CardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cards to aggregate.
     */
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: cardsOrderByWithRelationInput | cardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cards
    **/
    _count?: true | CardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardsMaxAggregateInputType
  }

  export type GetCardsAggregateType<T extends CardsAggregateArgs> = {
        [P in keyof T & keyof AggregateCards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCards[P]>
      : GetScalarType<T[P], AggregateCards[P]>
  }




  export type cardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cardsWhereInput
    orderBy?: cardsOrderByWithAggregationInput | cardsOrderByWithAggregationInput[]
    by: CardsScalarFieldEnum[] | CardsScalarFieldEnum
    having?: cardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardsCountAggregateInputType | true
    _avg?: CardsAvgAggregateInputType
    _sum?: CardsSumAggregateInputType
    _min?: CardsMinAggregateInputType
    _max?: CardsMaxAggregateInputType
  }

  export type CardsGroupByOutputType = {
    id: string
    user_id: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento: number | null
    _count: CardsCountAggregateOutputType | null
    _avg: CardsAvgAggregateOutputType | null
    _sum: CardsSumAggregateOutputType | null
    _min: CardsMinAggregateOutputType | null
    _max: CardsMaxAggregateOutputType | null
  }

  type GetCardsGroupByPayload<T extends cardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardsGroupByOutputType[P]>
            : GetScalarType<T[P], CardsGroupByOutputType[P]>
        }
      >
    >


  export type cardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    nome?: boolean
    tipo?: boolean
    numero?: boolean
    cor?: boolean
    limite?: boolean
    dia_vencimento?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    expenses?: boolean | cards$expensesArgs<ExtArgs>
    _count?: boolean | CardsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cards"]>

  export type cardsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    nome?: boolean
    tipo?: boolean
    numero?: boolean
    cor?: boolean
    limite?: boolean
    dia_vencimento?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cards"]>

  export type cardsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    nome?: boolean
    tipo?: boolean
    numero?: boolean
    cor?: boolean
    limite?: boolean
    dia_vencimento?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cards"]>

  export type cardsSelectScalar = {
    id?: boolean
    user_id?: boolean
    nome?: boolean
    tipo?: boolean
    numero?: boolean
    cor?: boolean
    limite?: boolean
    dia_vencimento?: boolean
  }

  export type cardsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "nome" | "tipo" | "numero" | "cor" | "limite" | "dia_vencimento", ExtArgs["result"]["cards"]>
  export type cardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    expenses?: boolean | cards$expensesArgs<ExtArgs>
    _count?: boolean | CardsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type cardsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type cardsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $cardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cards"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      expenses: Prisma.$expensesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      nome: string
      tipo: string
      numero: string
      cor: string
      limite: number
      dia_vencimento: number | null
    }, ExtArgs["result"]["cards"]>
    composites: {}
  }

  type cardsGetPayload<S extends boolean | null | undefined | cardsDefaultArgs> = $Result.GetResult<Prisma.$cardsPayload, S>

  type cardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cardsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardsCountAggregateInputType | true
    }

  export interface cardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cards'], meta: { name: 'cards' } }
    /**
     * Find zero or one Cards that matches the filter.
     * @param {cardsFindUniqueArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cardsFindUniqueArgs>(args: SelectSubset<T, cardsFindUniqueArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cards that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cardsFindUniqueOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cardsFindUniqueOrThrowArgs>(args: SelectSubset<T, cardsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindFirstArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cardsFindFirstArgs>(args?: SelectSubset<T, cardsFindFirstArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindFirstOrThrowArgs} args - Arguments to find a Cards
     * @example
     * // Get one Cards
     * const cards = await prisma.cards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cardsFindFirstOrThrowArgs>(args?: SelectSubset<T, cardsFindFirstOrThrowArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.cards.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.cards.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardsWithIdOnly = await prisma.cards.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cardsFindManyArgs>(args?: SelectSubset<T, cardsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cards.
     * @param {cardsCreateArgs} args - Arguments to create a Cards.
     * @example
     * // Create one Cards
     * const Cards = await prisma.cards.create({
     *   data: {
     *     // ... data to create a Cards
     *   }
     * })
     * 
     */
    create<T extends cardsCreateArgs>(args: SelectSubset<T, cardsCreateArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cards.
     * @param {cardsCreateManyArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const cards = await prisma.cards.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cardsCreateManyArgs>(args?: SelectSubset<T, cardsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cards and returns the data saved in the database.
     * @param {cardsCreateManyAndReturnArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const cards = await prisma.cards.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cards and only return the `id`
     * const cardsWithIdOnly = await prisma.cards.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cardsCreateManyAndReturnArgs>(args?: SelectSubset<T, cardsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cards.
     * @param {cardsDeleteArgs} args - Arguments to delete one Cards.
     * @example
     * // Delete one Cards
     * const Cards = await prisma.cards.delete({
     *   where: {
     *     // ... filter to delete one Cards
     *   }
     * })
     * 
     */
    delete<T extends cardsDeleteArgs>(args: SelectSubset<T, cardsDeleteArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cards.
     * @param {cardsUpdateArgs} args - Arguments to update one Cards.
     * @example
     * // Update one Cards
     * const cards = await prisma.cards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cardsUpdateArgs>(args: SelectSubset<T, cardsUpdateArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cards.
     * @param {cardsDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.cards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cardsDeleteManyArgs>(args?: SelectSubset<T, cardsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const cards = await prisma.cards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cardsUpdateManyArgs>(args: SelectSubset<T, cardsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards and returns the data updated in the database.
     * @param {cardsUpdateManyAndReturnArgs} args - Arguments to update many Cards.
     * @example
     * // Update many Cards
     * const cards = await prisma.cards.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cards and only return the `id`
     * const cardsWithIdOnly = await prisma.cards.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends cardsUpdateManyAndReturnArgs>(args: SelectSubset<T, cardsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cards.
     * @param {cardsUpsertArgs} args - Arguments to update or create a Cards.
     * @example
     * // Update or create a Cards
     * const cards = await prisma.cards.upsert({
     *   create: {
     *     // ... data to create a Cards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cards we want to update
     *   }
     * })
     */
    upsert<T extends cardsUpsertArgs>(args: SelectSubset<T, cardsUpsertArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.cards.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends cardsCountArgs>(
      args?: Subset<T, cardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardsAggregateArgs>(args: Subset<T, CardsAggregateArgs>): Prisma.PrismaPromise<GetCardsAggregateType<T>>

    /**
     * Group by Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cardsGroupByArgs['orderBy'] }
        : { orderBy?: cardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cards model
   */
  readonly fields: cardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expenses<T extends cards$expensesArgs<ExtArgs> = {}>(args?: Subset<T, cards$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cards model
   */
  interface cardsFieldRefs {
    readonly id: FieldRef<"cards", 'String'>
    readonly user_id: FieldRef<"cards", 'String'>
    readonly nome: FieldRef<"cards", 'String'>
    readonly tipo: FieldRef<"cards", 'String'>
    readonly numero: FieldRef<"cards", 'String'>
    readonly cor: FieldRef<"cards", 'String'>
    readonly limite: FieldRef<"cards", 'Float'>
    readonly dia_vencimento: FieldRef<"cards", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * cards findUnique
   */
  export type cardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where: cardsWhereUniqueInput
  }

  /**
   * cards findUniqueOrThrow
   */
  export type cardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where: cardsWhereUniqueInput
  }

  /**
   * cards findFirst
   */
  export type cardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: cardsOrderByWithRelationInput | cardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cards.
     */
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cards.
     */
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * cards findFirstOrThrow
   */
  export type cardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: cardsOrderByWithRelationInput | cardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cards.
     */
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cards.
     */
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * cards findMany
   */
  export type cardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where?: cardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: cardsOrderByWithRelationInput | cardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cards.
     */
    cursor?: cardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    distinct?: CardsScalarFieldEnum | CardsScalarFieldEnum[]
  }

  /**
   * cards create
   */
  export type cardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * The data needed to create a cards.
     */
    data: XOR<cardsCreateInput, cardsUncheckedCreateInput>
  }

  /**
   * cards createMany
   */
  export type cardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cards.
     */
    data: cardsCreateManyInput | cardsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cards createManyAndReturn
   */
  export type cardsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * The data used to create many cards.
     */
    data: cardsCreateManyInput | cardsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * cards update
   */
  export type cardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * The data needed to update a cards.
     */
    data: XOR<cardsUpdateInput, cardsUncheckedUpdateInput>
    /**
     * Choose, which cards to update.
     */
    where: cardsWhereUniqueInput
  }

  /**
   * cards updateMany
   */
  export type cardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cards.
     */
    data: XOR<cardsUpdateManyMutationInput, cardsUncheckedUpdateManyInput>
    /**
     * Filter which cards to update
     */
    where?: cardsWhereInput
    /**
     * Limit how many cards to update.
     */
    limit?: number
  }

  /**
   * cards updateManyAndReturn
   */
  export type cardsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * The data used to update cards.
     */
    data: XOR<cardsUpdateManyMutationInput, cardsUncheckedUpdateManyInput>
    /**
     * Filter which cards to update
     */
    where?: cardsWhereInput
    /**
     * Limit how many cards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * cards upsert
   */
  export type cardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * The filter to search for the cards to update in case it exists.
     */
    where: cardsWhereUniqueInput
    /**
     * In case the cards found by the `where` argument doesn't exist, create a new cards with this data.
     */
    create: XOR<cardsCreateInput, cardsUncheckedCreateInput>
    /**
     * In case the cards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cardsUpdateInput, cardsUncheckedUpdateInput>
  }

  /**
   * cards delete
   */
  export type cardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    /**
     * Filter which cards to delete.
     */
    where: cardsWhereUniqueInput
  }

  /**
   * cards deleteMany
   */
  export type cardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cards to delete
     */
    where?: cardsWhereInput
    /**
     * Limit how many cards to delete.
     */
    limit?: number
  }

  /**
   * cards.expenses
   */
  export type cards$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    where?: expensesWhereInput
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    cursor?: expensesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * cards without action
   */
  export type cardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
  }


  /**
   * Model expenses
   */

  export type AggregateExpenses = {
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  export type ExpensesAvgAggregateOutputType = {
    quantidade: number | null
    parcelas: number | null
  }

  export type ExpensesSumAggregateOutputType = {
    quantidade: number | null
    parcelas: number | null
  }

  export type ExpensesMinAggregateOutputType = {
    id: string | null
    metodo_pagamento: string | null
    tipo: string | null
    quantidade: number | null
    fixo: boolean | null
    data: Date | null
    parcelas: number | null
    frequencia: string | null
    user_id: string | null
    card_id: string | null
    category_id: string | null
  }

  export type ExpensesMaxAggregateOutputType = {
    id: string | null
    metodo_pagamento: string | null
    tipo: string | null
    quantidade: number | null
    fixo: boolean | null
    data: Date | null
    parcelas: number | null
    frequencia: string | null
    user_id: string | null
    card_id: string | null
    category_id: string | null
  }

  export type ExpensesCountAggregateOutputType = {
    id: number
    metodo_pagamento: number
    tipo: number
    quantidade: number
    fixo: number
    data: number
    parcelas: number
    frequencia: number
    user_id: number
    card_id: number
    category_id: number
    _all: number
  }


  export type ExpensesAvgAggregateInputType = {
    quantidade?: true
    parcelas?: true
  }

  export type ExpensesSumAggregateInputType = {
    quantidade?: true
    parcelas?: true
  }

  export type ExpensesMinAggregateInputType = {
    id?: true
    metodo_pagamento?: true
    tipo?: true
    quantidade?: true
    fixo?: true
    data?: true
    parcelas?: true
    frequencia?: true
    user_id?: true
    card_id?: true
    category_id?: true
  }

  export type ExpensesMaxAggregateInputType = {
    id?: true
    metodo_pagamento?: true
    tipo?: true
    quantidade?: true
    fixo?: true
    data?: true
    parcelas?: true
    frequencia?: true
    user_id?: true
    card_id?: true
    category_id?: true
  }

  export type ExpensesCountAggregateInputType = {
    id?: true
    metodo_pagamento?: true
    tipo?: true
    quantidade?: true
    fixo?: true
    data?: true
    parcelas?: true
    frequencia?: true
    user_id?: true
    card_id?: true
    category_id?: true
    _all?: true
  }

  export type ExpensesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expenses to aggregate.
     */
    where?: expensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: expensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned expenses
    **/
    _count?: true | ExpensesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpensesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpensesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpensesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpensesMaxAggregateInputType
  }

  export type GetExpensesAggregateType<T extends ExpensesAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenses[P]>
      : GetScalarType<T[P], AggregateExpenses[P]>
  }




  export type expensesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expensesWhereInput
    orderBy?: expensesOrderByWithAggregationInput | expensesOrderByWithAggregationInput[]
    by: ExpensesScalarFieldEnum[] | ExpensesScalarFieldEnum
    having?: expensesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpensesCountAggregateInputType | true
    _avg?: ExpensesAvgAggregateInputType
    _sum?: ExpensesSumAggregateInputType
    _min?: ExpensesMinAggregateInputType
    _max?: ExpensesMaxAggregateInputType
  }

  export type ExpensesGroupByOutputType = {
    id: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo: boolean
    data: Date
    parcelas: number | null
    frequencia: string | null
    user_id: string
    card_id: string | null
    category_id: string | null
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  type GetExpensesGroupByPayload<T extends expensesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpensesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpensesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
            : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
        }
      >
    >


  export type expensesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metodo_pagamento?: boolean
    tipo?: boolean
    quantidade?: boolean
    fixo?: boolean
    data?: boolean
    parcelas?: boolean
    frequencia?: boolean
    user_id?: boolean
    card_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
    history?: boolean | expenses$historyArgs<ExtArgs>
    _count?: boolean | ExpensesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenses"]>

  export type expensesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metodo_pagamento?: boolean
    tipo?: boolean
    quantidade?: boolean
    fixo?: boolean
    data?: boolean
    parcelas?: boolean
    frequencia?: boolean
    user_id?: boolean
    card_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["expenses"]>

  export type expensesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metodo_pagamento?: boolean
    tipo?: boolean
    quantidade?: boolean
    fixo?: boolean
    data?: boolean
    parcelas?: boolean
    frequencia?: boolean
    user_id?: boolean
    card_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["expenses"]>

  export type expensesSelectScalar = {
    id?: boolean
    metodo_pagamento?: boolean
    tipo?: boolean
    quantidade?: boolean
    fixo?: boolean
    data?: boolean
    parcelas?: boolean
    frequencia?: boolean
    user_id?: boolean
    card_id?: boolean
    category_id?: boolean
  }

  export type expensesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "metodo_pagamento" | "tipo" | "quantidade" | "fixo" | "data" | "parcelas" | "frequencia" | "user_id" | "card_id" | "category_id", ExtArgs["result"]["expenses"]>
  export type expensesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
    history?: boolean | expenses$historyArgs<ExtArgs>
    _count?: boolean | ExpensesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type expensesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
  }
  export type expensesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    card?: boolean | expenses$cardArgs<ExtArgs>
    category?: boolean | expenses$categoryArgs<ExtArgs>
  }

  export type $expensesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "expenses"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      card: Prisma.$cardsPayload<ExtArgs> | null
      category: Prisma.$categoriasPayload<ExtArgs> | null
      history: Prisma.$expense_historyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      metodo_pagamento: string
      tipo: string
      quantidade: number
      fixo: boolean
      data: Date
      parcelas: number | null
      frequencia: string | null
      user_id: string
      card_id: string | null
      category_id: string | null
    }, ExtArgs["result"]["expenses"]>
    composites: {}
  }

  type expensesGetPayload<S extends boolean | null | undefined | expensesDefaultArgs> = $Result.GetResult<Prisma.$expensesPayload, S>

  type expensesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<expensesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpensesCountAggregateInputType | true
    }

  export interface expensesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['expenses'], meta: { name: 'expenses' } }
    /**
     * Find zero or one Expenses that matches the filter.
     * @param {expensesFindUniqueArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends expensesFindUniqueArgs>(args: SelectSubset<T, expensesFindUniqueArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expenses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {expensesFindUniqueOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends expensesFindUniqueOrThrowArgs>(args: SelectSubset<T, expensesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesFindFirstArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends expensesFindFirstArgs>(args?: SelectSubset<T, expensesFindFirstArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesFindFirstOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends expensesFindFirstOrThrowArgs>(args?: SelectSubset<T, expensesFindFirstOrThrowArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expenses.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expenses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expensesWithIdOnly = await prisma.expenses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends expensesFindManyArgs>(args?: SelectSubset<T, expensesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expenses.
     * @param {expensesCreateArgs} args - Arguments to create a Expenses.
     * @example
     * // Create one Expenses
     * const Expenses = await prisma.expenses.create({
     *   data: {
     *     // ... data to create a Expenses
     *   }
     * })
     * 
     */
    create<T extends expensesCreateArgs>(args: SelectSubset<T, expensesCreateArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {expensesCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expenses = await prisma.expenses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends expensesCreateManyArgs>(args?: SelectSubset<T, expensesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expenses and returns the data saved in the database.
     * @param {expensesCreateManyAndReturnArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expenses = await prisma.expenses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expenses and only return the `id`
     * const expensesWithIdOnly = await prisma.expenses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends expensesCreateManyAndReturnArgs>(args?: SelectSubset<T, expensesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Expenses.
     * @param {expensesDeleteArgs} args - Arguments to delete one Expenses.
     * @example
     * // Delete one Expenses
     * const Expenses = await prisma.expenses.delete({
     *   where: {
     *     // ... filter to delete one Expenses
     *   }
     * })
     * 
     */
    delete<T extends expensesDeleteArgs>(args: SelectSubset<T, expensesDeleteArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expenses.
     * @param {expensesUpdateArgs} args - Arguments to update one Expenses.
     * @example
     * // Update one Expenses
     * const expenses = await prisma.expenses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends expensesUpdateArgs>(args: SelectSubset<T, expensesUpdateArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {expensesDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expenses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends expensesDeleteManyArgs>(args?: SelectSubset<T, expensesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expenses = await prisma.expenses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends expensesUpdateManyArgs>(args: SelectSubset<T, expensesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses and returns the data updated in the database.
     * @param {expensesUpdateManyAndReturnArgs} args - Arguments to update many Expenses.
     * @example
     * // Update many Expenses
     * const expenses = await prisma.expenses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Expenses and only return the `id`
     * const expensesWithIdOnly = await prisma.expenses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends expensesUpdateManyAndReturnArgs>(args: SelectSubset<T, expensesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Expenses.
     * @param {expensesUpsertArgs} args - Arguments to update or create a Expenses.
     * @example
     * // Update or create a Expenses
     * const expenses = await prisma.expenses.upsert({
     *   create: {
     *     // ... data to create a Expenses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expenses we want to update
     *   }
     * })
     */
    upsert<T extends expensesUpsertArgs>(args: SelectSubset<T, expensesUpsertArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expenses.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends expensesCountArgs>(
      args?: Subset<T, expensesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpensesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpensesAggregateArgs>(args: Subset<T, ExpensesAggregateArgs>): Prisma.PrismaPromise<GetExpensesAggregateType<T>>

    /**
     * Group by Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expensesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends expensesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: expensesGroupByArgs['orderBy'] }
        : { orderBy?: expensesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, expensesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpensesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the expenses model
   */
  readonly fields: expensesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for expenses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__expensesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    card<T extends expenses$cardArgs<ExtArgs> = {}>(args?: Subset<T, expenses$cardArgs<ExtArgs>>): Prisma__cardsClient<$Result.GetResult<Prisma.$cardsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends expenses$categoryArgs<ExtArgs> = {}>(args?: Subset<T, expenses$categoryArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    history<T extends expenses$historyArgs<ExtArgs> = {}>(args?: Subset<T, expenses$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the expenses model
   */
  interface expensesFieldRefs {
    readonly id: FieldRef<"expenses", 'String'>
    readonly metodo_pagamento: FieldRef<"expenses", 'String'>
    readonly tipo: FieldRef<"expenses", 'String'>
    readonly quantidade: FieldRef<"expenses", 'Float'>
    readonly fixo: FieldRef<"expenses", 'Boolean'>
    readonly data: FieldRef<"expenses", 'DateTime'>
    readonly parcelas: FieldRef<"expenses", 'Int'>
    readonly frequencia: FieldRef<"expenses", 'String'>
    readonly user_id: FieldRef<"expenses", 'String'>
    readonly card_id: FieldRef<"expenses", 'String'>
    readonly category_id: FieldRef<"expenses", 'String'>
  }
    

  // Custom InputTypes
  /**
   * expenses findUnique
   */
  export type expensesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where: expensesWhereUniqueInput
  }

  /**
   * expenses findUniqueOrThrow
   */
  export type expensesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where: expensesWhereUniqueInput
  }

  /**
   * expenses findFirst
   */
  export type expensesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where?: expensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * expenses findFirstOrThrow
   */
  export type expensesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where?: expensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * expenses findMany
   */
  export type expensesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where?: expensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expensesOrderByWithRelationInput | expensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing expenses.
     */
    cursor?: expensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * expenses create
   */
  export type expensesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * The data needed to create a expenses.
     */
    data: XOR<expensesCreateInput, expensesUncheckedCreateInput>
  }

  /**
   * expenses createMany
   */
  export type expensesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many expenses.
     */
    data: expensesCreateManyInput | expensesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * expenses createManyAndReturn
   */
  export type expensesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * The data used to create many expenses.
     */
    data: expensesCreateManyInput | expensesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * expenses update
   */
  export type expensesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * The data needed to update a expenses.
     */
    data: XOR<expensesUpdateInput, expensesUncheckedUpdateInput>
    /**
     * Choose, which expenses to update.
     */
    where: expensesWhereUniqueInput
  }

  /**
   * expenses updateMany
   */
  export type expensesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update expenses.
     */
    data: XOR<expensesUpdateManyMutationInput, expensesUncheckedUpdateManyInput>
    /**
     * Filter which expenses to update
     */
    where?: expensesWhereInput
    /**
     * Limit how many expenses to update.
     */
    limit?: number
  }

  /**
   * expenses updateManyAndReturn
   */
  export type expensesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * The data used to update expenses.
     */
    data: XOR<expensesUpdateManyMutationInput, expensesUncheckedUpdateManyInput>
    /**
     * Filter which expenses to update
     */
    where?: expensesWhereInput
    /**
     * Limit how many expenses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * expenses upsert
   */
  export type expensesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * The filter to search for the expenses to update in case it exists.
     */
    where: expensesWhereUniqueInput
    /**
     * In case the expenses found by the `where` argument doesn't exist, create a new expenses with this data.
     */
    create: XOR<expensesCreateInput, expensesUncheckedCreateInput>
    /**
     * In case the expenses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<expensesUpdateInput, expensesUncheckedUpdateInput>
  }

  /**
   * expenses delete
   */
  export type expensesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
    /**
     * Filter which expenses to delete.
     */
    where: expensesWhereUniqueInput
  }

  /**
   * expenses deleteMany
   */
  export type expensesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expenses to delete
     */
    where?: expensesWhereInput
    /**
     * Limit how many expenses to delete.
     */
    limit?: number
  }

  /**
   * expenses.card
   */
  export type expenses$cardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cards
     */
    select?: cardsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cards
     */
    omit?: cardsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cardsInclude<ExtArgs> | null
    where?: cardsWhereInput
  }

  /**
   * expenses.category
   */
  export type expenses$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
  }

  /**
   * expenses.history
   */
  export type expenses$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    where?: expense_historyWhereInput
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    cursor?: expense_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Expense_historyScalarFieldEnum | Expense_historyScalarFieldEnum[]
  }

  /**
   * expenses without action
   */
  export type expensesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expenses
     */
    select?: expensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expenses
     */
    omit?: expensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expensesInclude<ExtArgs> | null
  }


  /**
   * Model expense_history
   */

  export type AggregateExpense_history = {
    _count: Expense_historyCountAggregateOutputType | null
    _min: Expense_historyMinAggregateOutputType | null
    _max: Expense_historyMaxAggregateOutputType | null
  }

  export type Expense_historyMinAggregateOutputType = {
    id: string | null
    expense_id: string | null
    user_id: string | null
    tipo: string | null
    data_alteracao: Date | null
  }

  export type Expense_historyMaxAggregateOutputType = {
    id: string | null
    expense_id: string | null
    user_id: string | null
    tipo: string | null
    data_alteracao: Date | null
  }

  export type Expense_historyCountAggregateOutputType = {
    id: number
    expense_id: number
    user_id: number
    tipo: number
    alteracao: number
    data_alteracao: number
    _all: number
  }


  export type Expense_historyMinAggregateInputType = {
    id?: true
    expense_id?: true
    user_id?: true
    tipo?: true
    data_alteracao?: true
  }

  export type Expense_historyMaxAggregateInputType = {
    id?: true
    expense_id?: true
    user_id?: true
    tipo?: true
    data_alteracao?: true
  }

  export type Expense_historyCountAggregateInputType = {
    id?: true
    expense_id?: true
    user_id?: true
    tipo?: true
    alteracao?: true
    data_alteracao?: true
    _all?: true
  }

  export type Expense_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expense_history to aggregate.
     */
    where?: expense_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expense_histories to fetch.
     */
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: expense_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expense_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expense_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned expense_histories
    **/
    _count?: true | Expense_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Expense_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Expense_historyMaxAggregateInputType
  }

  export type GetExpense_historyAggregateType<T extends Expense_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense_history[P]>
      : GetScalarType<T[P], AggregateExpense_history[P]>
  }




  export type expense_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expense_historyWhereInput
    orderBy?: expense_historyOrderByWithAggregationInput | expense_historyOrderByWithAggregationInput[]
    by: Expense_historyScalarFieldEnum[] | Expense_historyScalarFieldEnum
    having?: expense_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Expense_historyCountAggregateInputType | true
    _min?: Expense_historyMinAggregateInputType
    _max?: Expense_historyMaxAggregateInputType
  }

  export type Expense_historyGroupByOutputType = {
    id: string
    expense_id: string
    user_id: string
    tipo: string
    alteracao: JsonValue
    data_alteracao: Date
    _count: Expense_historyCountAggregateOutputType | null
    _min: Expense_historyMinAggregateOutputType | null
    _max: Expense_historyMaxAggregateOutputType | null
  }

  type GetExpense_historyGroupByPayload<T extends expense_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Expense_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Expense_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Expense_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Expense_historyGroupByOutputType[P]>
        }
      >
    >


  export type expense_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expense_id?: boolean
    user_id?: boolean
    tipo?: boolean
    alteracao?: boolean
    data_alteracao?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense_history"]>

  export type expense_historySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expense_id?: boolean
    user_id?: boolean
    tipo?: boolean
    alteracao?: boolean
    data_alteracao?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense_history"]>

  export type expense_historySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expense_id?: boolean
    user_id?: boolean
    tipo?: boolean
    alteracao?: boolean
    data_alteracao?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense_history"]>

  export type expense_historySelectScalar = {
    id?: boolean
    expense_id?: boolean
    user_id?: boolean
    tipo?: boolean
    alteracao?: boolean
    data_alteracao?: boolean
  }

  export type expense_historyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expense_id" | "user_id" | "tipo" | "alteracao" | "data_alteracao", ExtArgs["result"]["expense_history"]>
  export type expense_historyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }
  export type expense_historyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }
  export type expense_historyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    expense?: boolean | expensesDefaultArgs<ExtArgs>
  }

  export type $expense_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "expense_history"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      expense: Prisma.$expensesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expense_id: string
      user_id: string
      tipo: string
      alteracao: Prisma.JsonValue
      data_alteracao: Date
    }, ExtArgs["result"]["expense_history"]>
    composites: {}
  }

  type expense_historyGetPayload<S extends boolean | null | undefined | expense_historyDefaultArgs> = $Result.GetResult<Prisma.$expense_historyPayload, S>

  type expense_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<expense_historyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Expense_historyCountAggregateInputType | true
    }

  export interface expense_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['expense_history'], meta: { name: 'expense_history' } }
    /**
     * Find zero or one Expense_history that matches the filter.
     * @param {expense_historyFindUniqueArgs} args - Arguments to find a Expense_history
     * @example
     * // Get one Expense_history
     * const expense_history = await prisma.expense_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends expense_historyFindUniqueArgs>(args: SelectSubset<T, expense_historyFindUniqueArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expense_history that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {expense_historyFindUniqueOrThrowArgs} args - Arguments to find a Expense_history
     * @example
     * // Get one Expense_history
     * const expense_history = await prisma.expense_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends expense_historyFindUniqueOrThrowArgs>(args: SelectSubset<T, expense_historyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyFindFirstArgs} args - Arguments to find a Expense_history
     * @example
     * // Get one Expense_history
     * const expense_history = await prisma.expense_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends expense_historyFindFirstArgs>(args?: SelectSubset<T, expense_historyFindFirstArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyFindFirstOrThrowArgs} args - Arguments to find a Expense_history
     * @example
     * // Get one Expense_history
     * const expense_history = await prisma.expense_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends expense_historyFindFirstOrThrowArgs>(args?: SelectSubset<T, expense_historyFindFirstOrThrowArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expense_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expense_histories
     * const expense_histories = await prisma.expense_history.findMany()
     * 
     * // Get first 10 Expense_histories
     * const expense_histories = await prisma.expense_history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expense_historyWithIdOnly = await prisma.expense_history.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends expense_historyFindManyArgs>(args?: SelectSubset<T, expense_historyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expense_history.
     * @param {expense_historyCreateArgs} args - Arguments to create a Expense_history.
     * @example
     * // Create one Expense_history
     * const Expense_history = await prisma.expense_history.create({
     *   data: {
     *     // ... data to create a Expense_history
     *   }
     * })
     * 
     */
    create<T extends expense_historyCreateArgs>(args: SelectSubset<T, expense_historyCreateArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expense_histories.
     * @param {expense_historyCreateManyArgs} args - Arguments to create many Expense_histories.
     * @example
     * // Create many Expense_histories
     * const expense_history = await prisma.expense_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends expense_historyCreateManyArgs>(args?: SelectSubset<T, expense_historyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expense_histories and returns the data saved in the database.
     * @param {expense_historyCreateManyAndReturnArgs} args - Arguments to create many Expense_histories.
     * @example
     * // Create many Expense_histories
     * const expense_history = await prisma.expense_history.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expense_histories and only return the `id`
     * const expense_historyWithIdOnly = await prisma.expense_history.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends expense_historyCreateManyAndReturnArgs>(args?: SelectSubset<T, expense_historyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Expense_history.
     * @param {expense_historyDeleteArgs} args - Arguments to delete one Expense_history.
     * @example
     * // Delete one Expense_history
     * const Expense_history = await prisma.expense_history.delete({
     *   where: {
     *     // ... filter to delete one Expense_history
     *   }
     * })
     * 
     */
    delete<T extends expense_historyDeleteArgs>(args: SelectSubset<T, expense_historyDeleteArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expense_history.
     * @param {expense_historyUpdateArgs} args - Arguments to update one Expense_history.
     * @example
     * // Update one Expense_history
     * const expense_history = await prisma.expense_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends expense_historyUpdateArgs>(args: SelectSubset<T, expense_historyUpdateArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expense_histories.
     * @param {expense_historyDeleteManyArgs} args - Arguments to filter Expense_histories to delete.
     * @example
     * // Delete a few Expense_histories
     * const { count } = await prisma.expense_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends expense_historyDeleteManyArgs>(args?: SelectSubset<T, expense_historyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expense_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expense_histories
     * const expense_history = await prisma.expense_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends expense_historyUpdateManyArgs>(args: SelectSubset<T, expense_historyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expense_histories and returns the data updated in the database.
     * @param {expense_historyUpdateManyAndReturnArgs} args - Arguments to update many Expense_histories.
     * @example
     * // Update many Expense_histories
     * const expense_history = await prisma.expense_history.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Expense_histories and only return the `id`
     * const expense_historyWithIdOnly = await prisma.expense_history.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends expense_historyUpdateManyAndReturnArgs>(args: SelectSubset<T, expense_historyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Expense_history.
     * @param {expense_historyUpsertArgs} args - Arguments to update or create a Expense_history.
     * @example
     * // Update or create a Expense_history
     * const expense_history = await prisma.expense_history.upsert({
     *   create: {
     *     // ... data to create a Expense_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense_history we want to update
     *   }
     * })
     */
    upsert<T extends expense_historyUpsertArgs>(args: SelectSubset<T, expense_historyUpsertArgs<ExtArgs>>): Prisma__expense_historyClient<$Result.GetResult<Prisma.$expense_historyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expense_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyCountArgs} args - Arguments to filter Expense_histories to count.
     * @example
     * // Count the number of Expense_histories
     * const count = await prisma.expense_history.count({
     *   where: {
     *     // ... the filter for the Expense_histories we want to count
     *   }
     * })
    **/
    count<T extends expense_historyCountArgs>(
      args?: Subset<T, expense_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Expense_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Expense_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Expense_historyAggregateArgs>(args: Subset<T, Expense_historyAggregateArgs>): Prisma.PrismaPromise<GetExpense_historyAggregateType<T>>

    /**
     * Group by Expense_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expense_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends expense_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: expense_historyGroupByArgs['orderBy'] }
        : { orderBy?: expense_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, expense_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpense_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the expense_history model
   */
  readonly fields: expense_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for expense_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__expense_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    expense<T extends expensesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, expensesDefaultArgs<ExtArgs>>): Prisma__expensesClient<$Result.GetResult<Prisma.$expensesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the expense_history model
   */
  interface expense_historyFieldRefs {
    readonly id: FieldRef<"expense_history", 'String'>
    readonly expense_id: FieldRef<"expense_history", 'String'>
    readonly user_id: FieldRef<"expense_history", 'String'>
    readonly tipo: FieldRef<"expense_history", 'String'>
    readonly alteracao: FieldRef<"expense_history", 'Json'>
    readonly data_alteracao: FieldRef<"expense_history", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * expense_history findUnique
   */
  export type expense_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter, which expense_history to fetch.
     */
    where: expense_historyWhereUniqueInput
  }

  /**
   * expense_history findUniqueOrThrow
   */
  export type expense_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter, which expense_history to fetch.
     */
    where: expense_historyWhereUniqueInput
  }

  /**
   * expense_history findFirst
   */
  export type expense_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter, which expense_history to fetch.
     */
    where?: expense_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expense_histories to fetch.
     */
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expense_histories.
     */
    cursor?: expense_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expense_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expense_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expense_histories.
     */
    distinct?: Expense_historyScalarFieldEnum | Expense_historyScalarFieldEnum[]
  }

  /**
   * expense_history findFirstOrThrow
   */
  export type expense_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter, which expense_history to fetch.
     */
    where?: expense_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expense_histories to fetch.
     */
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expense_histories.
     */
    cursor?: expense_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expense_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expense_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expense_histories.
     */
    distinct?: Expense_historyScalarFieldEnum | Expense_historyScalarFieldEnum[]
  }

  /**
   * expense_history findMany
   */
  export type expense_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter, which expense_histories to fetch.
     */
    where?: expense_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expense_histories to fetch.
     */
    orderBy?: expense_historyOrderByWithRelationInput | expense_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing expense_histories.
     */
    cursor?: expense_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expense_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expense_histories.
     */
    skip?: number
    distinct?: Expense_historyScalarFieldEnum | Expense_historyScalarFieldEnum[]
  }

  /**
   * expense_history create
   */
  export type expense_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * The data needed to create a expense_history.
     */
    data: XOR<expense_historyCreateInput, expense_historyUncheckedCreateInput>
  }

  /**
   * expense_history createMany
   */
  export type expense_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many expense_histories.
     */
    data: expense_historyCreateManyInput | expense_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * expense_history createManyAndReturn
   */
  export type expense_historyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * The data used to create many expense_histories.
     */
    data: expense_historyCreateManyInput | expense_historyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * expense_history update
   */
  export type expense_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * The data needed to update a expense_history.
     */
    data: XOR<expense_historyUpdateInput, expense_historyUncheckedUpdateInput>
    /**
     * Choose, which expense_history to update.
     */
    where: expense_historyWhereUniqueInput
  }

  /**
   * expense_history updateMany
   */
  export type expense_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update expense_histories.
     */
    data: XOR<expense_historyUpdateManyMutationInput, expense_historyUncheckedUpdateManyInput>
    /**
     * Filter which expense_histories to update
     */
    where?: expense_historyWhereInput
    /**
     * Limit how many expense_histories to update.
     */
    limit?: number
  }

  /**
   * expense_history updateManyAndReturn
   */
  export type expense_historyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * The data used to update expense_histories.
     */
    data: XOR<expense_historyUpdateManyMutationInput, expense_historyUncheckedUpdateManyInput>
    /**
     * Filter which expense_histories to update
     */
    where?: expense_historyWhereInput
    /**
     * Limit how many expense_histories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * expense_history upsert
   */
  export type expense_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * The filter to search for the expense_history to update in case it exists.
     */
    where: expense_historyWhereUniqueInput
    /**
     * In case the expense_history found by the `where` argument doesn't exist, create a new expense_history with this data.
     */
    create: XOR<expense_historyCreateInput, expense_historyUncheckedCreateInput>
    /**
     * In case the expense_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<expense_historyUpdateInput, expense_historyUncheckedUpdateInput>
  }

  /**
   * expense_history delete
   */
  export type expense_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
    /**
     * Filter which expense_history to delete.
     */
    where: expense_historyWhereUniqueInput
  }

  /**
   * expense_history deleteMany
   */
  export type expense_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expense_histories to delete
     */
    where?: expense_historyWhereInput
    /**
     * Limit how many expense_histories to delete.
     */
    limit?: number
  }

  /**
   * expense_history without action
   */
  export type expense_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense_history
     */
    select?: expense_historySelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense_history
     */
    omit?: expense_historyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expense_historyInclude<ExtArgs> | null
  }


  /**
   * Model incomes
   */

  export type AggregateIncomes = {
    _count: IncomesCountAggregateOutputType | null
    _avg: IncomesAvgAggregateOutputType | null
    _sum: IncomesSumAggregateOutputType | null
    _min: IncomesMinAggregateOutputType | null
    _max: IncomesMaxAggregateOutputType | null
  }

  export type IncomesAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type IncomesSumAggregateOutputType = {
    quantidade: number | null
  }

  export type IncomesMinAggregateOutputType = {
    id: string | null
    tipo: string | null
    quantidade: number | null
    nota: string | null
    data: Date | null
    fonte: string | null
    user_id: string | null
    category_id: string | null
  }

  export type IncomesMaxAggregateOutputType = {
    id: string | null
    tipo: string | null
    quantidade: number | null
    nota: string | null
    data: Date | null
    fonte: string | null
    user_id: string | null
    category_id: string | null
  }

  export type IncomesCountAggregateOutputType = {
    id: number
    tipo: number
    quantidade: number
    nota: number
    data: number
    fonte: number
    user_id: number
    category_id: number
    _all: number
  }


  export type IncomesAvgAggregateInputType = {
    quantidade?: true
  }

  export type IncomesSumAggregateInputType = {
    quantidade?: true
  }

  export type IncomesMinAggregateInputType = {
    id?: true
    tipo?: true
    quantidade?: true
    nota?: true
    data?: true
    fonte?: true
    user_id?: true
    category_id?: true
  }

  export type IncomesMaxAggregateInputType = {
    id?: true
    tipo?: true
    quantidade?: true
    nota?: true
    data?: true
    fonte?: true
    user_id?: true
    category_id?: true
  }

  export type IncomesCountAggregateInputType = {
    id?: true
    tipo?: true
    quantidade?: true
    nota?: true
    data?: true
    fonte?: true
    user_id?: true
    category_id?: true
    _all?: true
  }

  export type IncomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which incomes to aggregate.
     */
    where?: incomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incomes to fetch.
     */
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: incomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned incomes
    **/
    _count?: true | IncomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IncomesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IncomesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncomesMaxAggregateInputType
  }

  export type GetIncomesAggregateType<T extends IncomesAggregateArgs> = {
        [P in keyof T & keyof AggregateIncomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncomes[P]>
      : GetScalarType<T[P], AggregateIncomes[P]>
  }




  export type incomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: incomesWhereInput
    orderBy?: incomesOrderByWithAggregationInput | incomesOrderByWithAggregationInput[]
    by: IncomesScalarFieldEnum[] | IncomesScalarFieldEnum
    having?: incomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncomesCountAggregateInputType | true
    _avg?: IncomesAvgAggregateInputType
    _sum?: IncomesSumAggregateInputType
    _min?: IncomesMinAggregateInputType
    _max?: IncomesMaxAggregateInputType
  }

  export type IncomesGroupByOutputType = {
    id: string
    tipo: string
    quantidade: number
    nota: string | null
    data: Date
    fonte: string
    user_id: string
    category_id: string | null
    _count: IncomesCountAggregateOutputType | null
    _avg: IncomesAvgAggregateOutputType | null
    _sum: IncomesSumAggregateOutputType | null
    _min: IncomesMinAggregateOutputType | null
    _max: IncomesMaxAggregateOutputType | null
  }

  type GetIncomesGroupByPayload<T extends incomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IncomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncomesGroupByOutputType[P]>
            : GetScalarType<T[P], IncomesGroupByOutputType[P]>
        }
      >
    >


  export type incomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    quantidade?: boolean
    nota?: boolean
    data?: boolean
    fonte?: boolean
    user_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["incomes"]>

  export type incomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    quantidade?: boolean
    nota?: boolean
    data?: boolean
    fonte?: boolean
    user_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["incomes"]>

  export type incomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    quantidade?: boolean
    nota?: boolean
    data?: boolean
    fonte?: boolean
    user_id?: boolean
    category_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["incomes"]>

  export type incomesSelectScalar = {
    id?: boolean
    tipo?: boolean
    quantidade?: boolean
    nota?: boolean
    data?: boolean
    fonte?: boolean
    user_id?: boolean
    category_id?: boolean
  }

  export type incomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipo" | "quantidade" | "nota" | "data" | "fonte" | "user_id" | "category_id", ExtArgs["result"]["incomes"]>
  export type incomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }
  export type incomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }
  export type incomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | incomes$categoryArgs<ExtArgs>
  }

  export type $incomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "incomes"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      category: Prisma.$categoriasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo: string
      quantidade: number
      nota: string | null
      data: Date
      fonte: string
      user_id: string
      category_id: string | null
    }, ExtArgs["result"]["incomes"]>
    composites: {}
  }

  type incomesGetPayload<S extends boolean | null | undefined | incomesDefaultArgs> = $Result.GetResult<Prisma.$incomesPayload, S>

  type incomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<incomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IncomesCountAggregateInputType | true
    }

  export interface incomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['incomes'], meta: { name: 'incomes' } }
    /**
     * Find zero or one Incomes that matches the filter.
     * @param {incomesFindUniqueArgs} args - Arguments to find a Incomes
     * @example
     * // Get one Incomes
     * const incomes = await prisma.incomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends incomesFindUniqueArgs>(args: SelectSubset<T, incomesFindUniqueArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Incomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {incomesFindUniqueOrThrowArgs} args - Arguments to find a Incomes
     * @example
     * // Get one Incomes
     * const incomes = await prisma.incomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends incomesFindUniqueOrThrowArgs>(args: SelectSubset<T, incomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Incomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesFindFirstArgs} args - Arguments to find a Incomes
     * @example
     * // Get one Incomes
     * const incomes = await prisma.incomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends incomesFindFirstArgs>(args?: SelectSubset<T, incomesFindFirstArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Incomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesFindFirstOrThrowArgs} args - Arguments to find a Incomes
     * @example
     * // Get one Incomes
     * const incomes = await prisma.incomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends incomesFindFirstOrThrowArgs>(args?: SelectSubset<T, incomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Incomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Incomes
     * const incomes = await prisma.incomes.findMany()
     * 
     * // Get first 10 Incomes
     * const incomes = await prisma.incomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const incomesWithIdOnly = await prisma.incomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends incomesFindManyArgs>(args?: SelectSubset<T, incomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Incomes.
     * @param {incomesCreateArgs} args - Arguments to create a Incomes.
     * @example
     * // Create one Incomes
     * const Incomes = await prisma.incomes.create({
     *   data: {
     *     // ... data to create a Incomes
     *   }
     * })
     * 
     */
    create<T extends incomesCreateArgs>(args: SelectSubset<T, incomesCreateArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Incomes.
     * @param {incomesCreateManyArgs} args - Arguments to create many Incomes.
     * @example
     * // Create many Incomes
     * const incomes = await prisma.incomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends incomesCreateManyArgs>(args?: SelectSubset<T, incomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Incomes and returns the data saved in the database.
     * @param {incomesCreateManyAndReturnArgs} args - Arguments to create many Incomes.
     * @example
     * // Create many Incomes
     * const incomes = await prisma.incomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Incomes and only return the `id`
     * const incomesWithIdOnly = await prisma.incomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends incomesCreateManyAndReturnArgs>(args?: SelectSubset<T, incomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Incomes.
     * @param {incomesDeleteArgs} args - Arguments to delete one Incomes.
     * @example
     * // Delete one Incomes
     * const Incomes = await prisma.incomes.delete({
     *   where: {
     *     // ... filter to delete one Incomes
     *   }
     * })
     * 
     */
    delete<T extends incomesDeleteArgs>(args: SelectSubset<T, incomesDeleteArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Incomes.
     * @param {incomesUpdateArgs} args - Arguments to update one Incomes.
     * @example
     * // Update one Incomes
     * const incomes = await prisma.incomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends incomesUpdateArgs>(args: SelectSubset<T, incomesUpdateArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Incomes.
     * @param {incomesDeleteManyArgs} args - Arguments to filter Incomes to delete.
     * @example
     * // Delete a few Incomes
     * const { count } = await prisma.incomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends incomesDeleteManyArgs>(args?: SelectSubset<T, incomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Incomes
     * const incomes = await prisma.incomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends incomesUpdateManyArgs>(args: SelectSubset<T, incomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incomes and returns the data updated in the database.
     * @param {incomesUpdateManyAndReturnArgs} args - Arguments to update many Incomes.
     * @example
     * // Update many Incomes
     * const incomes = await prisma.incomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Incomes and only return the `id`
     * const incomesWithIdOnly = await prisma.incomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends incomesUpdateManyAndReturnArgs>(args: SelectSubset<T, incomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Incomes.
     * @param {incomesUpsertArgs} args - Arguments to update or create a Incomes.
     * @example
     * // Update or create a Incomes
     * const incomes = await prisma.incomes.upsert({
     *   create: {
     *     // ... data to create a Incomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Incomes we want to update
     *   }
     * })
     */
    upsert<T extends incomesUpsertArgs>(args: SelectSubset<T, incomesUpsertArgs<ExtArgs>>): Prisma__incomesClient<$Result.GetResult<Prisma.$incomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Incomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesCountArgs} args - Arguments to filter Incomes to count.
     * @example
     * // Count the number of Incomes
     * const count = await prisma.incomes.count({
     *   where: {
     *     // ... the filter for the Incomes we want to count
     *   }
     * })
    **/
    count<T extends incomesCountArgs>(
      args?: Subset<T, incomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Incomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncomesAggregateArgs>(args: Subset<T, IncomesAggregateArgs>): Prisma.PrismaPromise<GetIncomesAggregateType<T>>

    /**
     * Group by Incomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends incomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: incomesGroupByArgs['orderBy'] }
        : { orderBy?: incomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, incomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the incomes model
   */
  readonly fields: incomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for incomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__incomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends incomes$categoryArgs<ExtArgs> = {}>(args?: Subset<T, incomes$categoryArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the incomes model
   */
  interface incomesFieldRefs {
    readonly id: FieldRef<"incomes", 'String'>
    readonly tipo: FieldRef<"incomes", 'String'>
    readonly quantidade: FieldRef<"incomes", 'Float'>
    readonly nota: FieldRef<"incomes", 'String'>
    readonly data: FieldRef<"incomes", 'DateTime'>
    readonly fonte: FieldRef<"incomes", 'String'>
    readonly user_id: FieldRef<"incomes", 'String'>
    readonly category_id: FieldRef<"incomes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * incomes findUnique
   */
  export type incomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter, which incomes to fetch.
     */
    where: incomesWhereUniqueInput
  }

  /**
   * incomes findUniqueOrThrow
   */
  export type incomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter, which incomes to fetch.
     */
    where: incomesWhereUniqueInput
  }

  /**
   * incomes findFirst
   */
  export type incomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter, which incomes to fetch.
     */
    where?: incomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incomes to fetch.
     */
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for incomes.
     */
    cursor?: incomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of incomes.
     */
    distinct?: IncomesScalarFieldEnum | IncomesScalarFieldEnum[]
  }

  /**
   * incomes findFirstOrThrow
   */
  export type incomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter, which incomes to fetch.
     */
    where?: incomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incomes to fetch.
     */
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for incomes.
     */
    cursor?: incomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of incomes.
     */
    distinct?: IncomesScalarFieldEnum | IncomesScalarFieldEnum[]
  }

  /**
   * incomes findMany
   */
  export type incomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter, which incomes to fetch.
     */
    where?: incomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incomes to fetch.
     */
    orderBy?: incomesOrderByWithRelationInput | incomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing incomes.
     */
    cursor?: incomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incomes.
     */
    skip?: number
    distinct?: IncomesScalarFieldEnum | IncomesScalarFieldEnum[]
  }

  /**
   * incomes create
   */
  export type incomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * The data needed to create a incomes.
     */
    data: XOR<incomesCreateInput, incomesUncheckedCreateInput>
  }

  /**
   * incomes createMany
   */
  export type incomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many incomes.
     */
    data: incomesCreateManyInput | incomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * incomes createManyAndReturn
   */
  export type incomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * The data used to create many incomes.
     */
    data: incomesCreateManyInput | incomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * incomes update
   */
  export type incomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * The data needed to update a incomes.
     */
    data: XOR<incomesUpdateInput, incomesUncheckedUpdateInput>
    /**
     * Choose, which incomes to update.
     */
    where: incomesWhereUniqueInput
  }

  /**
   * incomes updateMany
   */
  export type incomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update incomes.
     */
    data: XOR<incomesUpdateManyMutationInput, incomesUncheckedUpdateManyInput>
    /**
     * Filter which incomes to update
     */
    where?: incomesWhereInput
    /**
     * Limit how many incomes to update.
     */
    limit?: number
  }

  /**
   * incomes updateManyAndReturn
   */
  export type incomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * The data used to update incomes.
     */
    data: XOR<incomesUpdateManyMutationInput, incomesUncheckedUpdateManyInput>
    /**
     * Filter which incomes to update
     */
    where?: incomesWhereInput
    /**
     * Limit how many incomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * incomes upsert
   */
  export type incomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * The filter to search for the incomes to update in case it exists.
     */
    where: incomesWhereUniqueInput
    /**
     * In case the incomes found by the `where` argument doesn't exist, create a new incomes with this data.
     */
    create: XOR<incomesCreateInput, incomesUncheckedCreateInput>
    /**
     * In case the incomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<incomesUpdateInput, incomesUncheckedUpdateInput>
  }

  /**
   * incomes delete
   */
  export type incomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
    /**
     * Filter which incomes to delete.
     */
    where: incomesWhereUniqueInput
  }

  /**
   * incomes deleteMany
   */
  export type incomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which incomes to delete
     */
    where?: incomesWhereInput
    /**
     * Limit how many incomes to delete.
     */
    limit?: number
  }

  /**
   * incomes.category
   */
  export type incomes$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categorias
     */
    omit?: categoriasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriasInclude<ExtArgs> | null
    where?: categoriasWhereInput
  }

  /**
   * incomes without action
   */
  export type incomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incomes
     */
    select?: incomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incomes
     */
    omit?: incomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: incomesInclude<ExtArgs> | null
  }


  /**
   * Model investimentos
   */

  export type AggregateInvestimentos = {
    _count: InvestimentosCountAggregateOutputType | null
    _avg: InvestimentosAvgAggregateOutputType | null
    _sum: InvestimentosSumAggregateOutputType | null
    _min: InvestimentosMinAggregateOutputType | null
    _max: InvestimentosMaxAggregateOutputType | null
  }

  export type InvestimentosAvgAggregateOutputType = {
    quantidade: number | null
  }

  export type InvestimentosSumAggregateOutputType = {
    quantidade: number | null
  }

  export type InvestimentosMinAggregateOutputType = {
    id: string | null
    tipo: string | null
    nome: string | null
    quantidade: number | null
    descricao: string | null
    data: Date | null
    user_id: string | null
  }

  export type InvestimentosMaxAggregateOutputType = {
    id: string | null
    tipo: string | null
    nome: string | null
    quantidade: number | null
    descricao: string | null
    data: Date | null
    user_id: string | null
  }

  export type InvestimentosCountAggregateOutputType = {
    id: number
    tipo: number
    nome: number
    quantidade: number
    descricao: number
    data: number
    user_id: number
    _all: number
  }


  export type InvestimentosAvgAggregateInputType = {
    quantidade?: true
  }

  export type InvestimentosSumAggregateInputType = {
    quantidade?: true
  }

  export type InvestimentosMinAggregateInputType = {
    id?: true
    tipo?: true
    nome?: true
    quantidade?: true
    descricao?: true
    data?: true
    user_id?: true
  }

  export type InvestimentosMaxAggregateInputType = {
    id?: true
    tipo?: true
    nome?: true
    quantidade?: true
    descricao?: true
    data?: true
    user_id?: true
  }

  export type InvestimentosCountAggregateInputType = {
    id?: true
    tipo?: true
    nome?: true
    quantidade?: true
    descricao?: true
    data?: true
    user_id?: true
    _all?: true
  }

  export type InvestimentosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which investimentos to aggregate.
     */
    where?: investimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of investimentos to fetch.
     */
    orderBy?: investimentosOrderByWithRelationInput | investimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: investimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned investimentos
    **/
    _count?: true | InvestimentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvestimentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvestimentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestimentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestimentosMaxAggregateInputType
  }

  export type GetInvestimentosAggregateType<T extends InvestimentosAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestimentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestimentos[P]>
      : GetScalarType<T[P], AggregateInvestimentos[P]>
  }




  export type investimentosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: investimentosWhereInput
    orderBy?: investimentosOrderByWithAggregationInput | investimentosOrderByWithAggregationInput[]
    by: InvestimentosScalarFieldEnum[] | InvestimentosScalarFieldEnum
    having?: investimentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestimentosCountAggregateInputType | true
    _avg?: InvestimentosAvgAggregateInputType
    _sum?: InvestimentosSumAggregateInputType
    _min?: InvestimentosMinAggregateInputType
    _max?: InvestimentosMaxAggregateInputType
  }

  export type InvestimentosGroupByOutputType = {
    id: string
    tipo: string
    nome: string
    quantidade: number
    descricao: string | null
    data: Date
    user_id: string
    _count: InvestimentosCountAggregateOutputType | null
    _avg: InvestimentosAvgAggregateOutputType | null
    _sum: InvestimentosSumAggregateOutputType | null
    _min: InvestimentosMinAggregateOutputType | null
    _max: InvestimentosMaxAggregateOutputType | null
  }

  type GetInvestimentosGroupByPayload<T extends investimentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestimentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestimentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestimentosGroupByOutputType[P]>
            : GetScalarType<T[P], InvestimentosGroupByOutputType[P]>
        }
      >
    >


  export type investimentosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    nome?: boolean
    quantidade?: boolean
    descricao?: boolean
    data?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investimentos"]>

  export type investimentosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    nome?: boolean
    quantidade?: boolean
    descricao?: boolean
    data?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investimentos"]>

  export type investimentosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    nome?: boolean
    quantidade?: boolean
    descricao?: boolean
    data?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investimentos"]>

  export type investimentosSelectScalar = {
    id?: boolean
    tipo?: boolean
    nome?: boolean
    quantidade?: boolean
    descricao?: boolean
    data?: boolean
    user_id?: boolean
  }

  export type investimentosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipo" | "nome" | "quantidade" | "descricao" | "data" | "user_id", ExtArgs["result"]["investimentos"]>
  export type investimentosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type investimentosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type investimentosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $investimentosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "investimentos"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo: string
      nome: string
      quantidade: number
      descricao: string | null
      data: Date
      user_id: string
    }, ExtArgs["result"]["investimentos"]>
    composites: {}
  }

  type investimentosGetPayload<S extends boolean | null | undefined | investimentosDefaultArgs> = $Result.GetResult<Prisma.$investimentosPayload, S>

  type investimentosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<investimentosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvestimentosCountAggregateInputType | true
    }

  export interface investimentosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['investimentos'], meta: { name: 'investimentos' } }
    /**
     * Find zero or one Investimentos that matches the filter.
     * @param {investimentosFindUniqueArgs} args - Arguments to find a Investimentos
     * @example
     * // Get one Investimentos
     * const investimentos = await prisma.investimentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends investimentosFindUniqueArgs>(args: SelectSubset<T, investimentosFindUniqueArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Investimentos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {investimentosFindUniqueOrThrowArgs} args - Arguments to find a Investimentos
     * @example
     * // Get one Investimentos
     * const investimentos = await prisma.investimentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends investimentosFindUniqueOrThrowArgs>(args: SelectSubset<T, investimentosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Investimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosFindFirstArgs} args - Arguments to find a Investimentos
     * @example
     * // Get one Investimentos
     * const investimentos = await prisma.investimentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends investimentosFindFirstArgs>(args?: SelectSubset<T, investimentosFindFirstArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Investimentos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosFindFirstOrThrowArgs} args - Arguments to find a Investimentos
     * @example
     * // Get one Investimentos
     * const investimentos = await prisma.investimentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends investimentosFindFirstOrThrowArgs>(args?: SelectSubset<T, investimentosFindFirstOrThrowArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Investimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investimentos
     * const investimentos = await prisma.investimentos.findMany()
     * 
     * // Get first 10 Investimentos
     * const investimentos = await prisma.investimentos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investimentosWithIdOnly = await prisma.investimentos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends investimentosFindManyArgs>(args?: SelectSubset<T, investimentosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Investimentos.
     * @param {investimentosCreateArgs} args - Arguments to create a Investimentos.
     * @example
     * // Create one Investimentos
     * const Investimentos = await prisma.investimentos.create({
     *   data: {
     *     // ... data to create a Investimentos
     *   }
     * })
     * 
     */
    create<T extends investimentosCreateArgs>(args: SelectSubset<T, investimentosCreateArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Investimentos.
     * @param {investimentosCreateManyArgs} args - Arguments to create many Investimentos.
     * @example
     * // Create many Investimentos
     * const investimentos = await prisma.investimentos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends investimentosCreateManyArgs>(args?: SelectSubset<T, investimentosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Investimentos and returns the data saved in the database.
     * @param {investimentosCreateManyAndReturnArgs} args - Arguments to create many Investimentos.
     * @example
     * // Create many Investimentos
     * const investimentos = await prisma.investimentos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Investimentos and only return the `id`
     * const investimentosWithIdOnly = await prisma.investimentos.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends investimentosCreateManyAndReturnArgs>(args?: SelectSubset<T, investimentosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Investimentos.
     * @param {investimentosDeleteArgs} args - Arguments to delete one Investimentos.
     * @example
     * // Delete one Investimentos
     * const Investimentos = await prisma.investimentos.delete({
     *   where: {
     *     // ... filter to delete one Investimentos
     *   }
     * })
     * 
     */
    delete<T extends investimentosDeleteArgs>(args: SelectSubset<T, investimentosDeleteArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Investimentos.
     * @param {investimentosUpdateArgs} args - Arguments to update one Investimentos.
     * @example
     * // Update one Investimentos
     * const investimentos = await prisma.investimentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends investimentosUpdateArgs>(args: SelectSubset<T, investimentosUpdateArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Investimentos.
     * @param {investimentosDeleteManyArgs} args - Arguments to filter Investimentos to delete.
     * @example
     * // Delete a few Investimentos
     * const { count } = await prisma.investimentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends investimentosDeleteManyArgs>(args?: SelectSubset<T, investimentosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investimentos
     * const investimentos = await prisma.investimentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends investimentosUpdateManyArgs>(args: SelectSubset<T, investimentosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investimentos and returns the data updated in the database.
     * @param {investimentosUpdateManyAndReturnArgs} args - Arguments to update many Investimentos.
     * @example
     * // Update many Investimentos
     * const investimentos = await prisma.investimentos.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Investimentos and only return the `id`
     * const investimentosWithIdOnly = await prisma.investimentos.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends investimentosUpdateManyAndReturnArgs>(args: SelectSubset<T, investimentosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Investimentos.
     * @param {investimentosUpsertArgs} args - Arguments to update or create a Investimentos.
     * @example
     * // Update or create a Investimentos
     * const investimentos = await prisma.investimentos.upsert({
     *   create: {
     *     // ... data to create a Investimentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investimentos we want to update
     *   }
     * })
     */
    upsert<T extends investimentosUpsertArgs>(args: SelectSubset<T, investimentosUpsertArgs<ExtArgs>>): Prisma__investimentosClient<$Result.GetResult<Prisma.$investimentosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Investimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosCountArgs} args - Arguments to filter Investimentos to count.
     * @example
     * // Count the number of Investimentos
     * const count = await prisma.investimentos.count({
     *   where: {
     *     // ... the filter for the Investimentos we want to count
     *   }
     * })
    **/
    count<T extends investimentosCountArgs>(
      args?: Subset<T, investimentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestimentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Investimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestimentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestimentosAggregateArgs>(args: Subset<T, InvestimentosAggregateArgs>): Prisma.PrismaPromise<GetInvestimentosAggregateType<T>>

    /**
     * Group by Investimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {investimentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends investimentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: investimentosGroupByArgs['orderBy'] }
        : { orderBy?: investimentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, investimentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestimentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the investimentos model
   */
  readonly fields: investimentosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for investimentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__investimentosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the investimentos model
   */
  interface investimentosFieldRefs {
    readonly id: FieldRef<"investimentos", 'String'>
    readonly tipo: FieldRef<"investimentos", 'String'>
    readonly nome: FieldRef<"investimentos", 'String'>
    readonly quantidade: FieldRef<"investimentos", 'Float'>
    readonly descricao: FieldRef<"investimentos", 'String'>
    readonly data: FieldRef<"investimentos", 'DateTime'>
    readonly user_id: FieldRef<"investimentos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * investimentos findUnique
   */
  export type investimentosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter, which investimentos to fetch.
     */
    where: investimentosWhereUniqueInput
  }

  /**
   * investimentos findUniqueOrThrow
   */
  export type investimentosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter, which investimentos to fetch.
     */
    where: investimentosWhereUniqueInput
  }

  /**
   * investimentos findFirst
   */
  export type investimentosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter, which investimentos to fetch.
     */
    where?: investimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of investimentos to fetch.
     */
    orderBy?: investimentosOrderByWithRelationInput | investimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for investimentos.
     */
    cursor?: investimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of investimentos.
     */
    distinct?: InvestimentosScalarFieldEnum | InvestimentosScalarFieldEnum[]
  }

  /**
   * investimentos findFirstOrThrow
   */
  export type investimentosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter, which investimentos to fetch.
     */
    where?: investimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of investimentos to fetch.
     */
    orderBy?: investimentosOrderByWithRelationInput | investimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for investimentos.
     */
    cursor?: investimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of investimentos.
     */
    distinct?: InvestimentosScalarFieldEnum | InvestimentosScalarFieldEnum[]
  }

  /**
   * investimentos findMany
   */
  export type investimentosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter, which investimentos to fetch.
     */
    where?: investimentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of investimentos to fetch.
     */
    orderBy?: investimentosOrderByWithRelationInput | investimentosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing investimentos.
     */
    cursor?: investimentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` investimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` investimentos.
     */
    skip?: number
    distinct?: InvestimentosScalarFieldEnum | InvestimentosScalarFieldEnum[]
  }

  /**
   * investimentos create
   */
  export type investimentosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * The data needed to create a investimentos.
     */
    data: XOR<investimentosCreateInput, investimentosUncheckedCreateInput>
  }

  /**
   * investimentos createMany
   */
  export type investimentosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many investimentos.
     */
    data: investimentosCreateManyInput | investimentosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * investimentos createManyAndReturn
   */
  export type investimentosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * The data used to create many investimentos.
     */
    data: investimentosCreateManyInput | investimentosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * investimentos update
   */
  export type investimentosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * The data needed to update a investimentos.
     */
    data: XOR<investimentosUpdateInput, investimentosUncheckedUpdateInput>
    /**
     * Choose, which investimentos to update.
     */
    where: investimentosWhereUniqueInput
  }

  /**
   * investimentos updateMany
   */
  export type investimentosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update investimentos.
     */
    data: XOR<investimentosUpdateManyMutationInput, investimentosUncheckedUpdateManyInput>
    /**
     * Filter which investimentos to update
     */
    where?: investimentosWhereInput
    /**
     * Limit how many investimentos to update.
     */
    limit?: number
  }

  /**
   * investimentos updateManyAndReturn
   */
  export type investimentosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * The data used to update investimentos.
     */
    data: XOR<investimentosUpdateManyMutationInput, investimentosUncheckedUpdateManyInput>
    /**
     * Filter which investimentos to update
     */
    where?: investimentosWhereInput
    /**
     * Limit how many investimentos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * investimentos upsert
   */
  export type investimentosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * The filter to search for the investimentos to update in case it exists.
     */
    where: investimentosWhereUniqueInput
    /**
     * In case the investimentos found by the `where` argument doesn't exist, create a new investimentos with this data.
     */
    create: XOR<investimentosCreateInput, investimentosUncheckedCreateInput>
    /**
     * In case the investimentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<investimentosUpdateInput, investimentosUncheckedUpdateInput>
  }

  /**
   * investimentos delete
   */
  export type investimentosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
    /**
     * Filter which investimentos to delete.
     */
    where: investimentosWhereUniqueInput
  }

  /**
   * investimentos deleteMany
   */
  export type investimentosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which investimentos to delete
     */
    where?: investimentosWhereInput
    /**
     * Limit how many investimentos to delete.
     */
    limit?: number
  }

  /**
   * investimentos without action
   */
  export type investimentosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the investimentos
     */
    select?: investimentosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the investimentos
     */
    omit?: investimentosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: investimentosInclude<ExtArgs> | null
  }


  /**
   * Model thresholds
   */

  export type AggregateThresholds = {
    _count: ThresholdsCountAggregateOutputType | null
    _avg: ThresholdsAvgAggregateOutputType | null
    _sum: ThresholdsSumAggregateOutputType | null
    _min: ThresholdsMinAggregateOutputType | null
    _max: ThresholdsMaxAggregateOutputType | null
  }

  export type ThresholdsAvgAggregateOutputType = {
    valor: number | null
  }

  export type ThresholdsSumAggregateOutputType = {
    valor: number | null
  }

  export type ThresholdsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    category_id: string | null
    valor: number | null
  }

  export type ThresholdsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    category_id: string | null
    valor: number | null
  }

  export type ThresholdsCountAggregateOutputType = {
    id: number
    user_id: number
    category_id: number
    valor: number
    _all: number
  }


  export type ThresholdsAvgAggregateInputType = {
    valor?: true
  }

  export type ThresholdsSumAggregateInputType = {
    valor?: true
  }

  export type ThresholdsMinAggregateInputType = {
    id?: true
    user_id?: true
    category_id?: true
    valor?: true
  }

  export type ThresholdsMaxAggregateInputType = {
    id?: true
    user_id?: true
    category_id?: true
    valor?: true
  }

  export type ThresholdsCountAggregateInputType = {
    id?: true
    user_id?: true
    category_id?: true
    valor?: true
    _all?: true
  }

  export type ThresholdsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thresholds to aggregate.
     */
    where?: thresholdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thresholds to fetch.
     */
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thresholdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thresholds
    **/
    _count?: true | ThresholdsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThresholdsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThresholdsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThresholdsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThresholdsMaxAggregateInputType
  }

  export type GetThresholdsAggregateType<T extends ThresholdsAggregateArgs> = {
        [P in keyof T & keyof AggregateThresholds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThresholds[P]>
      : GetScalarType<T[P], AggregateThresholds[P]>
  }




  export type thresholdsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thresholdsWhereInput
    orderBy?: thresholdsOrderByWithAggregationInput | thresholdsOrderByWithAggregationInput[]
    by: ThresholdsScalarFieldEnum[] | ThresholdsScalarFieldEnum
    having?: thresholdsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThresholdsCountAggregateInputType | true
    _avg?: ThresholdsAvgAggregateInputType
    _sum?: ThresholdsSumAggregateInputType
    _min?: ThresholdsMinAggregateInputType
    _max?: ThresholdsMaxAggregateInputType
  }

  export type ThresholdsGroupByOutputType = {
    id: string
    user_id: string
    category_id: string
    valor: number
    _count: ThresholdsCountAggregateOutputType | null
    _avg: ThresholdsAvgAggregateOutputType | null
    _sum: ThresholdsSumAggregateOutputType | null
    _min: ThresholdsMinAggregateOutputType | null
    _max: ThresholdsMaxAggregateOutputType | null
  }

  type GetThresholdsGroupByPayload<T extends thresholdsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThresholdsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThresholdsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThresholdsGroupByOutputType[P]>
            : GetScalarType<T[P], ThresholdsGroupByOutputType[P]>
        }
      >
    >


  export type thresholdsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    category_id?: boolean
    valor?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thresholds"]>

  export type thresholdsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    category_id?: boolean
    valor?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thresholds"]>

  export type thresholdsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    category_id?: boolean
    valor?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thresholds"]>

  export type thresholdsSelectScalar = {
    id?: boolean
    user_id?: boolean
    category_id?: boolean
    valor?: boolean
  }

  export type thresholdsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "category_id" | "valor", ExtArgs["result"]["thresholds"]>
  export type thresholdsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }
  export type thresholdsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }
  export type thresholdsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    category?: boolean | categoriasDefaultArgs<ExtArgs>
  }

  export type $thresholdsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thresholds"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      category: Prisma.$categoriasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      category_id: string
      valor: number
    }, ExtArgs["result"]["thresholds"]>
    composites: {}
  }

  type thresholdsGetPayload<S extends boolean | null | undefined | thresholdsDefaultArgs> = $Result.GetResult<Prisma.$thresholdsPayload, S>

  type thresholdsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<thresholdsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThresholdsCountAggregateInputType | true
    }

  export interface thresholdsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thresholds'], meta: { name: 'thresholds' } }
    /**
     * Find zero or one Thresholds that matches the filter.
     * @param {thresholdsFindUniqueArgs} args - Arguments to find a Thresholds
     * @example
     * // Get one Thresholds
     * const thresholds = await prisma.thresholds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends thresholdsFindUniqueArgs>(args: SelectSubset<T, thresholdsFindUniqueArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thresholds that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {thresholdsFindUniqueOrThrowArgs} args - Arguments to find a Thresholds
     * @example
     * // Get one Thresholds
     * const thresholds = await prisma.thresholds.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends thresholdsFindUniqueOrThrowArgs>(args: SelectSubset<T, thresholdsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thresholds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsFindFirstArgs} args - Arguments to find a Thresholds
     * @example
     * // Get one Thresholds
     * const thresholds = await prisma.thresholds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends thresholdsFindFirstArgs>(args?: SelectSubset<T, thresholdsFindFirstArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thresholds that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsFindFirstOrThrowArgs} args - Arguments to find a Thresholds
     * @example
     * // Get one Thresholds
     * const thresholds = await prisma.thresholds.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends thresholdsFindFirstOrThrowArgs>(args?: SelectSubset<T, thresholdsFindFirstOrThrowArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Thresholds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thresholds
     * const thresholds = await prisma.thresholds.findMany()
     * 
     * // Get first 10 Thresholds
     * const thresholds = await prisma.thresholds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thresholdsWithIdOnly = await prisma.thresholds.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends thresholdsFindManyArgs>(args?: SelectSubset<T, thresholdsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thresholds.
     * @param {thresholdsCreateArgs} args - Arguments to create a Thresholds.
     * @example
     * // Create one Thresholds
     * const Thresholds = await prisma.thresholds.create({
     *   data: {
     *     // ... data to create a Thresholds
     *   }
     * })
     * 
     */
    create<T extends thresholdsCreateArgs>(args: SelectSubset<T, thresholdsCreateArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Thresholds.
     * @param {thresholdsCreateManyArgs} args - Arguments to create many Thresholds.
     * @example
     * // Create many Thresholds
     * const thresholds = await prisma.thresholds.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends thresholdsCreateManyArgs>(args?: SelectSubset<T, thresholdsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Thresholds and returns the data saved in the database.
     * @param {thresholdsCreateManyAndReturnArgs} args - Arguments to create many Thresholds.
     * @example
     * // Create many Thresholds
     * const thresholds = await prisma.thresholds.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Thresholds and only return the `id`
     * const thresholdsWithIdOnly = await prisma.thresholds.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends thresholdsCreateManyAndReturnArgs>(args?: SelectSubset<T, thresholdsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Thresholds.
     * @param {thresholdsDeleteArgs} args - Arguments to delete one Thresholds.
     * @example
     * // Delete one Thresholds
     * const Thresholds = await prisma.thresholds.delete({
     *   where: {
     *     // ... filter to delete one Thresholds
     *   }
     * })
     * 
     */
    delete<T extends thresholdsDeleteArgs>(args: SelectSubset<T, thresholdsDeleteArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thresholds.
     * @param {thresholdsUpdateArgs} args - Arguments to update one Thresholds.
     * @example
     * // Update one Thresholds
     * const thresholds = await prisma.thresholds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends thresholdsUpdateArgs>(args: SelectSubset<T, thresholdsUpdateArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Thresholds.
     * @param {thresholdsDeleteManyArgs} args - Arguments to filter Thresholds to delete.
     * @example
     * // Delete a few Thresholds
     * const { count } = await prisma.thresholds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends thresholdsDeleteManyArgs>(args?: SelectSubset<T, thresholdsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thresholds
     * const thresholds = await prisma.thresholds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends thresholdsUpdateManyArgs>(args: SelectSubset<T, thresholdsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thresholds and returns the data updated in the database.
     * @param {thresholdsUpdateManyAndReturnArgs} args - Arguments to update many Thresholds.
     * @example
     * // Update many Thresholds
     * const thresholds = await prisma.thresholds.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Thresholds and only return the `id`
     * const thresholdsWithIdOnly = await prisma.thresholds.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends thresholdsUpdateManyAndReturnArgs>(args: SelectSubset<T, thresholdsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Thresholds.
     * @param {thresholdsUpsertArgs} args - Arguments to update or create a Thresholds.
     * @example
     * // Update or create a Thresholds
     * const thresholds = await prisma.thresholds.upsert({
     *   create: {
     *     // ... data to create a Thresholds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thresholds we want to update
     *   }
     * })
     */
    upsert<T extends thresholdsUpsertArgs>(args: SelectSubset<T, thresholdsUpsertArgs<ExtArgs>>): Prisma__thresholdsClient<$Result.GetResult<Prisma.$thresholdsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Thresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsCountArgs} args - Arguments to filter Thresholds to count.
     * @example
     * // Count the number of Thresholds
     * const count = await prisma.thresholds.count({
     *   where: {
     *     // ... the filter for the Thresholds we want to count
     *   }
     * })
    **/
    count<T extends thresholdsCountArgs>(
      args?: Subset<T, thresholdsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThresholdsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThresholdsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThresholdsAggregateArgs>(args: Subset<T, ThresholdsAggregateArgs>): Prisma.PrismaPromise<GetThresholdsAggregateType<T>>

    /**
     * Group by Thresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thresholdsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thresholdsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thresholdsGroupByArgs['orderBy'] }
        : { orderBy?: thresholdsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thresholdsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThresholdsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thresholds model
   */
  readonly fields: thresholdsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thresholds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thresholdsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends categoriasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriasDefaultArgs<ExtArgs>>): Prisma__categoriasClient<$Result.GetResult<Prisma.$categoriasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the thresholds model
   */
  interface thresholdsFieldRefs {
    readonly id: FieldRef<"thresholds", 'String'>
    readonly user_id: FieldRef<"thresholds", 'String'>
    readonly category_id: FieldRef<"thresholds", 'String'>
    readonly valor: FieldRef<"thresholds", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * thresholds findUnique
   */
  export type thresholdsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter, which thresholds to fetch.
     */
    where: thresholdsWhereUniqueInput
  }

  /**
   * thresholds findUniqueOrThrow
   */
  export type thresholdsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter, which thresholds to fetch.
     */
    where: thresholdsWhereUniqueInput
  }

  /**
   * thresholds findFirst
   */
  export type thresholdsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter, which thresholds to fetch.
     */
    where?: thresholdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thresholds to fetch.
     */
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thresholds.
     */
    cursor?: thresholdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thresholds.
     */
    distinct?: ThresholdsScalarFieldEnum | ThresholdsScalarFieldEnum[]
  }

  /**
   * thresholds findFirstOrThrow
   */
  export type thresholdsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter, which thresholds to fetch.
     */
    where?: thresholdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thresholds to fetch.
     */
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thresholds.
     */
    cursor?: thresholdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thresholds.
     */
    distinct?: ThresholdsScalarFieldEnum | ThresholdsScalarFieldEnum[]
  }

  /**
   * thresholds findMany
   */
  export type thresholdsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter, which thresholds to fetch.
     */
    where?: thresholdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thresholds to fetch.
     */
    orderBy?: thresholdsOrderByWithRelationInput | thresholdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thresholds.
     */
    cursor?: thresholdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thresholds.
     */
    skip?: number
    distinct?: ThresholdsScalarFieldEnum | ThresholdsScalarFieldEnum[]
  }

  /**
   * thresholds create
   */
  export type thresholdsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * The data needed to create a thresholds.
     */
    data: XOR<thresholdsCreateInput, thresholdsUncheckedCreateInput>
  }

  /**
   * thresholds createMany
   */
  export type thresholdsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thresholds.
     */
    data: thresholdsCreateManyInput | thresholdsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * thresholds createManyAndReturn
   */
  export type thresholdsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * The data used to create many thresholds.
     */
    data: thresholdsCreateManyInput | thresholdsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * thresholds update
   */
  export type thresholdsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * The data needed to update a thresholds.
     */
    data: XOR<thresholdsUpdateInput, thresholdsUncheckedUpdateInput>
    /**
     * Choose, which thresholds to update.
     */
    where: thresholdsWhereUniqueInput
  }

  /**
   * thresholds updateMany
   */
  export type thresholdsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thresholds.
     */
    data: XOR<thresholdsUpdateManyMutationInput, thresholdsUncheckedUpdateManyInput>
    /**
     * Filter which thresholds to update
     */
    where?: thresholdsWhereInput
    /**
     * Limit how many thresholds to update.
     */
    limit?: number
  }

  /**
   * thresholds updateManyAndReturn
   */
  export type thresholdsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * The data used to update thresholds.
     */
    data: XOR<thresholdsUpdateManyMutationInput, thresholdsUncheckedUpdateManyInput>
    /**
     * Filter which thresholds to update
     */
    where?: thresholdsWhereInput
    /**
     * Limit how many thresholds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * thresholds upsert
   */
  export type thresholdsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * The filter to search for the thresholds to update in case it exists.
     */
    where: thresholdsWhereUniqueInput
    /**
     * In case the thresholds found by the `where` argument doesn't exist, create a new thresholds with this data.
     */
    create: XOR<thresholdsCreateInput, thresholdsUncheckedCreateInput>
    /**
     * In case the thresholds was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thresholdsUpdateInput, thresholdsUncheckedUpdateInput>
  }

  /**
   * thresholds delete
   */
  export type thresholdsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
    /**
     * Filter which thresholds to delete.
     */
    where: thresholdsWhereUniqueInput
  }

  /**
   * thresholds deleteMany
   */
  export type thresholdsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thresholds to delete
     */
    where?: thresholdsWhereInput
    /**
     * Limit how many thresholds to delete.
     */
    limit?: number
  }

  /**
   * thresholds without action
   */
  export type thresholdsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thresholds
     */
    select?: thresholdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thresholds
     */
    omit?: thresholdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thresholdsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    password: 'password',
    currency: 'currency'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cor: 'cor',
    tipo: 'tipo',
    parent_id: 'parent_id',
    user_id: 'user_id'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const CardsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    nome: 'nome',
    tipo: 'tipo',
    numero: 'numero',
    cor: 'cor',
    limite: 'limite',
    dia_vencimento: 'dia_vencimento'
  };

  export type CardsScalarFieldEnum = (typeof CardsScalarFieldEnum)[keyof typeof CardsScalarFieldEnum]


  export const ExpensesScalarFieldEnum: {
    id: 'id',
    metodo_pagamento: 'metodo_pagamento',
    tipo: 'tipo',
    quantidade: 'quantidade',
    fixo: 'fixo',
    data: 'data',
    parcelas: 'parcelas',
    frequencia: 'frequencia',
    user_id: 'user_id',
    card_id: 'card_id',
    category_id: 'category_id'
  };

  export type ExpensesScalarFieldEnum = (typeof ExpensesScalarFieldEnum)[keyof typeof ExpensesScalarFieldEnum]


  export const Expense_historyScalarFieldEnum: {
    id: 'id',
    expense_id: 'expense_id',
    user_id: 'user_id',
    tipo: 'tipo',
    alteracao: 'alteracao',
    data_alteracao: 'data_alteracao'
  };

  export type Expense_historyScalarFieldEnum = (typeof Expense_historyScalarFieldEnum)[keyof typeof Expense_historyScalarFieldEnum]


  export const IncomesScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    quantidade: 'quantidade',
    nota: 'nota',
    data: 'data',
    fonte: 'fonte',
    user_id: 'user_id',
    category_id: 'category_id'
  };

  export type IncomesScalarFieldEnum = (typeof IncomesScalarFieldEnum)[keyof typeof IncomesScalarFieldEnum]


  export const InvestimentosScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    nome: 'nome',
    quantidade: 'quantidade',
    descricao: 'descricao',
    data: 'data',
    user_id: 'user_id'
  };

  export type InvestimentosScalarFieldEnum = (typeof InvestimentosScalarFieldEnum)[keyof typeof InvestimentosScalarFieldEnum]


  export const ThresholdsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    category_id: 'category_id',
    valor: 'valor'
  };

  export type ThresholdsScalarFieldEnum = (typeof ThresholdsScalarFieldEnum)[keyof typeof ThresholdsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    nome?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    currency?: StringFilter<"users"> | string
    expenses?: ExpensesListRelationFilter
    incomes?: IncomesListRelationFilter
    investments?: InvestimentosListRelationFilter
    categorias?: CategoriasListRelationFilter
    cards?: CardsListRelationFilter
    expense_history?: Expense_historyListRelationFilter
    thresholds?: ThresholdsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    currency?: SortOrder
    expenses?: expensesOrderByRelationAggregateInput
    incomes?: incomesOrderByRelationAggregateInput
    investments?: investimentosOrderByRelationAggregateInput
    categorias?: categoriasOrderByRelationAggregateInput
    cards?: cardsOrderByRelationAggregateInput
    expense_history?: expense_historyOrderByRelationAggregateInput
    thresholds?: thresholdsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    nome?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    currency?: StringFilter<"users"> | string
    expenses?: ExpensesListRelationFilter
    incomes?: IncomesListRelationFilter
    investments?: InvestimentosListRelationFilter
    categorias?: CategoriasListRelationFilter
    cards?: CardsListRelationFilter
    expense_history?: Expense_historyListRelationFilter
    thresholds?: ThresholdsListRelationFilter
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    currency?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    nome?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    currency?: StringWithAggregatesFilter<"users"> | string
  }

  export type categoriasWhereInput = {
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    id?: StringFilter<"categorias"> | string
    nome?: StringFilter<"categorias"> | string
    cor?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    parent_id?: StringNullableFilter<"categorias"> | string | null
    user_id?: StringFilter<"categorias"> | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    parent?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
    children?: CategoriasListRelationFilter
    expenses?: ExpensesListRelationFilter
    incomes?: IncomesListRelationFilter
    thresholds?: ThresholdsListRelationFilter
  }

  export type categoriasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    tipo?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    user?: usersOrderByWithRelationInput
    parent?: categoriasOrderByWithRelationInput
    children?: categoriasOrderByRelationAggregateInput
    expenses?: expensesOrderByRelationAggregateInput
    incomes?: incomesOrderByRelationAggregateInput
    thresholds?: thresholdsOrderByRelationAggregateInput
  }

  export type categoriasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    nome?: StringFilter<"categorias"> | string
    cor?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    parent_id?: StringNullableFilter<"categorias"> | string | null
    user_id?: StringFilter<"categorias"> | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    parent?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
    children?: CategoriasListRelationFilter
    expenses?: ExpensesListRelationFilter
    incomes?: IncomesListRelationFilter
    thresholds?: ThresholdsListRelationFilter
  }, "id">

  export type categoriasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    tipo?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    user_id?: SortOrder
    _count?: categoriasCountOrderByAggregateInput
    _max?: categoriasMaxOrderByAggregateInput
    _min?: categoriasMinOrderByAggregateInput
  }

  export type categoriasScalarWhereWithAggregatesInput = {
    AND?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    OR?: categoriasScalarWhereWithAggregatesInput[]
    NOT?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"categorias"> | string
    nome?: StringWithAggregatesFilter<"categorias"> | string
    cor?: StringWithAggregatesFilter<"categorias"> | string
    tipo?: StringWithAggregatesFilter<"categorias"> | string
    parent_id?: StringNullableWithAggregatesFilter<"categorias"> | string | null
    user_id?: StringWithAggregatesFilter<"categorias"> | string
  }

  export type cardsWhereInput = {
    AND?: cardsWhereInput | cardsWhereInput[]
    OR?: cardsWhereInput[]
    NOT?: cardsWhereInput | cardsWhereInput[]
    id?: StringFilter<"cards"> | string
    user_id?: StringFilter<"cards"> | string
    nome?: StringFilter<"cards"> | string
    tipo?: StringFilter<"cards"> | string
    numero?: StringFilter<"cards"> | string
    cor?: StringFilter<"cards"> | string
    limite?: FloatFilter<"cards"> | number
    dia_vencimento?: IntNullableFilter<"cards"> | number | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    expenses?: ExpensesListRelationFilter
  }

  export type cardsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    numero?: SortOrder
    cor?: SortOrder
    limite?: SortOrder
    dia_vencimento?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    expenses?: expensesOrderByRelationAggregateInput
  }

  export type cardsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cardsWhereInput | cardsWhereInput[]
    OR?: cardsWhereInput[]
    NOT?: cardsWhereInput | cardsWhereInput[]
    user_id?: StringFilter<"cards"> | string
    nome?: StringFilter<"cards"> | string
    tipo?: StringFilter<"cards"> | string
    numero?: StringFilter<"cards"> | string
    cor?: StringFilter<"cards"> | string
    limite?: FloatFilter<"cards"> | number
    dia_vencimento?: IntNullableFilter<"cards"> | number | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    expenses?: ExpensesListRelationFilter
  }, "id">

  export type cardsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    numero?: SortOrder
    cor?: SortOrder
    limite?: SortOrder
    dia_vencimento?: SortOrderInput | SortOrder
    _count?: cardsCountOrderByAggregateInput
    _avg?: cardsAvgOrderByAggregateInput
    _max?: cardsMaxOrderByAggregateInput
    _min?: cardsMinOrderByAggregateInput
    _sum?: cardsSumOrderByAggregateInput
  }

  export type cardsScalarWhereWithAggregatesInput = {
    AND?: cardsScalarWhereWithAggregatesInput | cardsScalarWhereWithAggregatesInput[]
    OR?: cardsScalarWhereWithAggregatesInput[]
    NOT?: cardsScalarWhereWithAggregatesInput | cardsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cards"> | string
    user_id?: StringWithAggregatesFilter<"cards"> | string
    nome?: StringWithAggregatesFilter<"cards"> | string
    tipo?: StringWithAggregatesFilter<"cards"> | string
    numero?: StringWithAggregatesFilter<"cards"> | string
    cor?: StringWithAggregatesFilter<"cards"> | string
    limite?: FloatWithAggregatesFilter<"cards"> | number
    dia_vencimento?: IntNullableWithAggregatesFilter<"cards"> | number | null
  }

  export type expensesWhereInput = {
    AND?: expensesWhereInput | expensesWhereInput[]
    OR?: expensesWhereInput[]
    NOT?: expensesWhereInput | expensesWhereInput[]
    id?: StringFilter<"expenses"> | string
    metodo_pagamento?: StringFilter<"expenses"> | string
    tipo?: StringFilter<"expenses"> | string
    quantidade?: FloatFilter<"expenses"> | number
    fixo?: BoolFilter<"expenses"> | boolean
    data?: DateTimeFilter<"expenses"> | Date | string
    parcelas?: IntNullableFilter<"expenses"> | number | null
    frequencia?: StringNullableFilter<"expenses"> | string | null
    user_id?: StringFilter<"expenses"> | string
    card_id?: StringNullableFilter<"expenses"> | string | null
    category_id?: StringNullableFilter<"expenses"> | string | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    card?: XOR<CardsNullableScalarRelationFilter, cardsWhereInput> | null
    category?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
    history?: Expense_historyListRelationFilter
  }

  export type expensesOrderByWithRelationInput = {
    id?: SortOrder
    metodo_pagamento?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    fixo?: SortOrder
    data?: SortOrder
    parcelas?: SortOrderInput | SortOrder
    frequencia?: SortOrderInput | SortOrder
    user_id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    category_id?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    card?: cardsOrderByWithRelationInput
    category?: categoriasOrderByWithRelationInput
    history?: expense_historyOrderByRelationAggregateInput
  }

  export type expensesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: expensesWhereInput | expensesWhereInput[]
    OR?: expensesWhereInput[]
    NOT?: expensesWhereInput | expensesWhereInput[]
    metodo_pagamento?: StringFilter<"expenses"> | string
    tipo?: StringFilter<"expenses"> | string
    quantidade?: FloatFilter<"expenses"> | number
    fixo?: BoolFilter<"expenses"> | boolean
    data?: DateTimeFilter<"expenses"> | Date | string
    parcelas?: IntNullableFilter<"expenses"> | number | null
    frequencia?: StringNullableFilter<"expenses"> | string | null
    user_id?: StringFilter<"expenses"> | string
    card_id?: StringNullableFilter<"expenses"> | string | null
    category_id?: StringNullableFilter<"expenses"> | string | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    card?: XOR<CardsNullableScalarRelationFilter, cardsWhereInput> | null
    category?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
    history?: Expense_historyListRelationFilter
  }, "id">

  export type expensesOrderByWithAggregationInput = {
    id?: SortOrder
    metodo_pagamento?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    fixo?: SortOrder
    data?: SortOrder
    parcelas?: SortOrderInput | SortOrder
    frequencia?: SortOrderInput | SortOrder
    user_id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    category_id?: SortOrderInput | SortOrder
    _count?: expensesCountOrderByAggregateInput
    _avg?: expensesAvgOrderByAggregateInput
    _max?: expensesMaxOrderByAggregateInput
    _min?: expensesMinOrderByAggregateInput
    _sum?: expensesSumOrderByAggregateInput
  }

  export type expensesScalarWhereWithAggregatesInput = {
    AND?: expensesScalarWhereWithAggregatesInput | expensesScalarWhereWithAggregatesInput[]
    OR?: expensesScalarWhereWithAggregatesInput[]
    NOT?: expensesScalarWhereWithAggregatesInput | expensesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"expenses"> | string
    metodo_pagamento?: StringWithAggregatesFilter<"expenses"> | string
    tipo?: StringWithAggregatesFilter<"expenses"> | string
    quantidade?: FloatWithAggregatesFilter<"expenses"> | number
    fixo?: BoolWithAggregatesFilter<"expenses"> | boolean
    data?: DateTimeWithAggregatesFilter<"expenses"> | Date | string
    parcelas?: IntNullableWithAggregatesFilter<"expenses"> | number | null
    frequencia?: StringNullableWithAggregatesFilter<"expenses"> | string | null
    user_id?: StringWithAggregatesFilter<"expenses"> | string
    card_id?: StringNullableWithAggregatesFilter<"expenses"> | string | null
    category_id?: StringNullableWithAggregatesFilter<"expenses"> | string | null
  }

  export type expense_historyWhereInput = {
    AND?: expense_historyWhereInput | expense_historyWhereInput[]
    OR?: expense_historyWhereInput[]
    NOT?: expense_historyWhereInput | expense_historyWhereInput[]
    id?: StringFilter<"expense_history"> | string
    expense_id?: StringFilter<"expense_history"> | string
    user_id?: StringFilter<"expense_history"> | string
    tipo?: StringFilter<"expense_history"> | string
    alteracao?: JsonFilter<"expense_history">
    data_alteracao?: DateTimeFilter<"expense_history"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    expense?: XOR<ExpensesScalarRelationFilter, expensesWhereInput>
  }

  export type expense_historyOrderByWithRelationInput = {
    id?: SortOrder
    expense_id?: SortOrder
    user_id?: SortOrder
    tipo?: SortOrder
    alteracao?: SortOrder
    data_alteracao?: SortOrder
    user?: usersOrderByWithRelationInput
    expense?: expensesOrderByWithRelationInput
  }

  export type expense_historyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: expense_historyWhereInput | expense_historyWhereInput[]
    OR?: expense_historyWhereInput[]
    NOT?: expense_historyWhereInput | expense_historyWhereInput[]
    expense_id?: StringFilter<"expense_history"> | string
    user_id?: StringFilter<"expense_history"> | string
    tipo?: StringFilter<"expense_history"> | string
    alteracao?: JsonFilter<"expense_history">
    data_alteracao?: DateTimeFilter<"expense_history"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    expense?: XOR<ExpensesScalarRelationFilter, expensesWhereInput>
  }, "id">

  export type expense_historyOrderByWithAggregationInput = {
    id?: SortOrder
    expense_id?: SortOrder
    user_id?: SortOrder
    tipo?: SortOrder
    alteracao?: SortOrder
    data_alteracao?: SortOrder
    _count?: expense_historyCountOrderByAggregateInput
    _max?: expense_historyMaxOrderByAggregateInput
    _min?: expense_historyMinOrderByAggregateInput
  }

  export type expense_historyScalarWhereWithAggregatesInput = {
    AND?: expense_historyScalarWhereWithAggregatesInput | expense_historyScalarWhereWithAggregatesInput[]
    OR?: expense_historyScalarWhereWithAggregatesInput[]
    NOT?: expense_historyScalarWhereWithAggregatesInput | expense_historyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"expense_history"> | string
    expense_id?: StringWithAggregatesFilter<"expense_history"> | string
    user_id?: StringWithAggregatesFilter<"expense_history"> | string
    tipo?: StringWithAggregatesFilter<"expense_history"> | string
    alteracao?: JsonWithAggregatesFilter<"expense_history">
    data_alteracao?: DateTimeWithAggregatesFilter<"expense_history"> | Date | string
  }

  export type incomesWhereInput = {
    AND?: incomesWhereInput | incomesWhereInput[]
    OR?: incomesWhereInput[]
    NOT?: incomesWhereInput | incomesWhereInput[]
    id?: StringFilter<"incomes"> | string
    tipo?: StringFilter<"incomes"> | string
    quantidade?: FloatFilter<"incomes"> | number
    nota?: StringNullableFilter<"incomes"> | string | null
    data?: DateTimeFilter<"incomes"> | Date | string
    fonte?: StringFilter<"incomes"> | string
    user_id?: StringFilter<"incomes"> | string
    category_id?: StringNullableFilter<"incomes"> | string | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    category?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
  }

  export type incomesOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    nota?: SortOrderInput | SortOrder
    data?: SortOrder
    fonte?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    category?: categoriasOrderByWithRelationInput
  }

  export type incomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: incomesWhereInput | incomesWhereInput[]
    OR?: incomesWhereInput[]
    NOT?: incomesWhereInput | incomesWhereInput[]
    tipo?: StringFilter<"incomes"> | string
    quantidade?: FloatFilter<"incomes"> | number
    nota?: StringNullableFilter<"incomes"> | string | null
    data?: DateTimeFilter<"incomes"> | Date | string
    fonte?: StringFilter<"incomes"> | string
    user_id?: StringFilter<"incomes"> | string
    category_id?: StringNullableFilter<"incomes"> | string | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    category?: XOR<CategoriasNullableScalarRelationFilter, categoriasWhereInput> | null
  }, "id">

  export type incomesOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    nota?: SortOrderInput | SortOrder
    data?: SortOrder
    fonte?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    _count?: incomesCountOrderByAggregateInput
    _avg?: incomesAvgOrderByAggregateInput
    _max?: incomesMaxOrderByAggregateInput
    _min?: incomesMinOrderByAggregateInput
    _sum?: incomesSumOrderByAggregateInput
  }

  export type incomesScalarWhereWithAggregatesInput = {
    AND?: incomesScalarWhereWithAggregatesInput | incomesScalarWhereWithAggregatesInput[]
    OR?: incomesScalarWhereWithAggregatesInput[]
    NOT?: incomesScalarWhereWithAggregatesInput | incomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"incomes"> | string
    tipo?: StringWithAggregatesFilter<"incomes"> | string
    quantidade?: FloatWithAggregatesFilter<"incomes"> | number
    nota?: StringNullableWithAggregatesFilter<"incomes"> | string | null
    data?: DateTimeWithAggregatesFilter<"incomes"> | Date | string
    fonte?: StringWithAggregatesFilter<"incomes"> | string
    user_id?: StringWithAggregatesFilter<"incomes"> | string
    category_id?: StringNullableWithAggregatesFilter<"incomes"> | string | null
  }

  export type investimentosWhereInput = {
    AND?: investimentosWhereInput | investimentosWhereInput[]
    OR?: investimentosWhereInput[]
    NOT?: investimentosWhereInput | investimentosWhereInput[]
    id?: StringFilter<"investimentos"> | string
    tipo?: StringFilter<"investimentos"> | string
    nome?: StringFilter<"investimentos"> | string
    quantidade?: FloatFilter<"investimentos"> | number
    descricao?: StringNullableFilter<"investimentos"> | string | null
    data?: DateTimeFilter<"investimentos"> | Date | string
    user_id?: StringFilter<"investimentos"> | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type investimentosOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data?: SortOrder
    user_id?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type investimentosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: investimentosWhereInput | investimentosWhereInput[]
    OR?: investimentosWhereInput[]
    NOT?: investimentosWhereInput | investimentosWhereInput[]
    tipo?: StringFilter<"investimentos"> | string
    nome?: StringFilter<"investimentos"> | string
    quantidade?: FloatFilter<"investimentos"> | number
    descricao?: StringNullableFilter<"investimentos"> | string | null
    data?: DateTimeFilter<"investimentos"> | Date | string
    user_id?: StringFilter<"investimentos"> | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type investimentosOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data?: SortOrder
    user_id?: SortOrder
    _count?: investimentosCountOrderByAggregateInput
    _avg?: investimentosAvgOrderByAggregateInput
    _max?: investimentosMaxOrderByAggregateInput
    _min?: investimentosMinOrderByAggregateInput
    _sum?: investimentosSumOrderByAggregateInput
  }

  export type investimentosScalarWhereWithAggregatesInput = {
    AND?: investimentosScalarWhereWithAggregatesInput | investimentosScalarWhereWithAggregatesInput[]
    OR?: investimentosScalarWhereWithAggregatesInput[]
    NOT?: investimentosScalarWhereWithAggregatesInput | investimentosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"investimentos"> | string
    tipo?: StringWithAggregatesFilter<"investimentos"> | string
    nome?: StringWithAggregatesFilter<"investimentos"> | string
    quantidade?: FloatWithAggregatesFilter<"investimentos"> | number
    descricao?: StringNullableWithAggregatesFilter<"investimentos"> | string | null
    data?: DateTimeWithAggregatesFilter<"investimentos"> | Date | string
    user_id?: StringWithAggregatesFilter<"investimentos"> | string
  }

  export type thresholdsWhereInput = {
    AND?: thresholdsWhereInput | thresholdsWhereInput[]
    OR?: thresholdsWhereInput[]
    NOT?: thresholdsWhereInput | thresholdsWhereInput[]
    id?: StringFilter<"thresholds"> | string
    user_id?: StringFilter<"thresholds"> | string
    category_id?: StringFilter<"thresholds"> | string
    valor?: FloatFilter<"thresholds"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    category?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
  }

  export type thresholdsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
    valor?: SortOrder
    user?: usersOrderByWithRelationInput
    category?: categoriasOrderByWithRelationInput
  }

  export type thresholdsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id_category_id?: thresholdsUser_idCategory_idCompoundUniqueInput
    AND?: thresholdsWhereInput | thresholdsWhereInput[]
    OR?: thresholdsWhereInput[]
    NOT?: thresholdsWhereInput | thresholdsWhereInput[]
    user_id?: StringFilter<"thresholds"> | string
    category_id?: StringFilter<"thresholds"> | string
    valor?: FloatFilter<"thresholds"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    category?: XOR<CategoriasScalarRelationFilter, categoriasWhereInput>
  }, "id" | "user_id_category_id">

  export type thresholdsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
    valor?: SortOrder
    _count?: thresholdsCountOrderByAggregateInput
    _avg?: thresholdsAvgOrderByAggregateInput
    _max?: thresholdsMaxOrderByAggregateInput
    _min?: thresholdsMinOrderByAggregateInput
    _sum?: thresholdsSumOrderByAggregateInput
  }

  export type thresholdsScalarWhereWithAggregatesInput = {
    AND?: thresholdsScalarWhereWithAggregatesInput | thresholdsScalarWhereWithAggregatesInput[]
    OR?: thresholdsScalarWhereWithAggregatesInput[]
    NOT?: thresholdsScalarWhereWithAggregatesInput | thresholdsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"thresholds"> | string
    user_id?: StringWithAggregatesFilter<"thresholds"> | string
    category_id?: StringWithAggregatesFilter<"thresholds"> | string
    valor?: FloatWithAggregatesFilter<"thresholds"> | number
  }

  export type usersCreateInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasCreateInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    children?: categoriasCreateNestedManyWithoutParentInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasCreateManyInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
  }

  export type categoriasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type cardsCreateInput = {
    id?: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
    user: usersCreateNestedOneWithoutCardsInput
    expenses?: expensesCreateNestedManyWithoutCardInput
  }

  export type cardsUncheckedCreateInput = {
    id?: string
    user_id: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
    expenses?: expensesUncheckedCreateNestedManyWithoutCardInput
  }

  export type cardsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    user?: usersUpdateOneRequiredWithoutCardsNestedInput
    expenses?: expensesUpdateManyWithoutCardNestedInput
  }

  export type cardsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: expensesUncheckedUpdateManyWithoutCardNestedInput
  }

  export type cardsCreateManyInput = {
    id?: string
    user_id: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
  }

  export type cardsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cardsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type expensesCreateInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user: usersCreateNestedOneWithoutExpensesInput
    card?: cardsCreateNestedOneWithoutExpensesInput
    category?: categoriasCreateNestedOneWithoutExpensesInput
    history?: expense_historyCreateNestedManyWithoutExpenseInput
  }

  export type expensesUncheckedCreateInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    card_id?: string | null
    category_id?: string | null
    history?: expense_historyUncheckedCreateNestedManyWithoutExpenseInput
  }

  export type expensesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutExpensesNestedInput
    card?: cardsUpdateOneWithoutExpensesNestedInput
    category?: categoriasUpdateOneWithoutExpensesNestedInput
    history?: expense_historyUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    history?: expense_historyUncheckedUpdateManyWithoutExpenseNestedInput
  }

  export type expensesCreateManyInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    card_id?: string | null
    category_id?: string | null
  }

  export type expensesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expensesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expense_historyCreateInput = {
    id?: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
    user: usersCreateNestedOneWithoutExpense_historyInput
    expense: expensesCreateNestedOneWithoutHistoryInput
  }

  export type expense_historyUncheckedCreateInput = {
    id?: string
    expense_id: string
    user_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type expense_historyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutExpense_historyNestedInput
    expense?: expensesUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type expense_historyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expense_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type expense_historyCreateManyInput = {
    id?: string
    expense_id: string
    user_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type expense_historyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type expense_historyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expense_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type incomesCreateInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user: usersCreateNestedOneWithoutIncomesInput
    category?: categoriasCreateNestedOneWithoutIncomesInput
  }

  export type incomesUncheckedCreateInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user_id: string
    category_id?: string | null
  }

  export type incomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutIncomesNestedInput
    category?: categoriasUpdateOneWithoutIncomesNestedInput
  }

  export type incomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type incomesCreateManyInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user_id: string
    category_id?: string | null
  }

  export type incomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
  }

  export type incomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type investimentosCreateInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
    user: usersCreateNestedOneWithoutInvestmentsInput
  }

  export type investimentosUncheckedCreateInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
    user_id: string
  }

  export type investimentosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutInvestmentsNestedInput
  }

  export type investimentosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type investimentosCreateManyInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
    user_id: string
  }

  export type investimentosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type investimentosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type thresholdsCreateInput = {
    id?: string
    valor: number
    user: usersCreateNestedOneWithoutThresholdsInput
    category: categoriasCreateNestedOneWithoutThresholdsInput
  }

  export type thresholdsUncheckedCreateInput = {
    id?: string
    user_id: string
    category_id: string
    valor: number
  }

  export type thresholdsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    user?: usersUpdateOneRequiredWithoutThresholdsNestedInput
    category?: categoriasUpdateOneRequiredWithoutThresholdsNestedInput
  }

  export type thresholdsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type thresholdsCreateManyInput = {
    id?: string
    user_id: string
    category_id: string
    valor: number
  }

  export type thresholdsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type thresholdsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ExpensesListRelationFilter = {
    every?: expensesWhereInput
    some?: expensesWhereInput
    none?: expensesWhereInput
  }

  export type IncomesListRelationFilter = {
    every?: incomesWhereInput
    some?: incomesWhereInput
    none?: incomesWhereInput
  }

  export type InvestimentosListRelationFilter = {
    every?: investimentosWhereInput
    some?: investimentosWhereInput
    none?: investimentosWhereInput
  }

  export type CategoriasListRelationFilter = {
    every?: categoriasWhereInput
    some?: categoriasWhereInput
    none?: categoriasWhereInput
  }

  export type CardsListRelationFilter = {
    every?: cardsWhereInput
    some?: cardsWhereInput
    none?: cardsWhereInput
  }

  export type Expense_historyListRelationFilter = {
    every?: expense_historyWhereInput
    some?: expense_historyWhereInput
    none?: expense_historyWhereInput
  }

  export type ThresholdsListRelationFilter = {
    every?: thresholdsWhereInput
    some?: thresholdsWhereInput
    none?: thresholdsWhereInput
  }

  export type expensesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type incomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type investimentosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type cardsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type expense_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type thresholdsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    currency?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    currency?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    currency?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type CategoriasNullableScalarRelationFilter = {
    is?: categoriasWhereInput | null
    isNot?: categoriasWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type categoriasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    tipo?: SortOrder
    parent_id?: SortOrder
    user_id?: SortOrder
  }

  export type categoriasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    tipo?: SortOrder
    parent_id?: SortOrder
    user_id?: SortOrder
  }

  export type categoriasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    tipo?: SortOrder
    parent_id?: SortOrder
    user_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type cardsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    numero?: SortOrder
    cor?: SortOrder
    limite?: SortOrder
    dia_vencimento?: SortOrder
  }

  export type cardsAvgOrderByAggregateInput = {
    limite?: SortOrder
    dia_vencimento?: SortOrder
  }

  export type cardsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    numero?: SortOrder
    cor?: SortOrder
    limite?: SortOrder
    dia_vencimento?: SortOrder
  }

  export type cardsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    numero?: SortOrder
    cor?: SortOrder
    limite?: SortOrder
    dia_vencimento?: SortOrder
  }

  export type cardsSumOrderByAggregateInput = {
    limite?: SortOrder
    dia_vencimento?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CardsNullableScalarRelationFilter = {
    is?: cardsWhereInput | null
    isNot?: cardsWhereInput | null
  }

  export type expensesCountOrderByAggregateInput = {
    id?: SortOrder
    metodo_pagamento?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    fixo?: SortOrder
    data?: SortOrder
    parcelas?: SortOrder
    frequencia?: SortOrder
    user_id?: SortOrder
    card_id?: SortOrder
    category_id?: SortOrder
  }

  export type expensesAvgOrderByAggregateInput = {
    quantidade?: SortOrder
    parcelas?: SortOrder
  }

  export type expensesMaxOrderByAggregateInput = {
    id?: SortOrder
    metodo_pagamento?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    fixo?: SortOrder
    data?: SortOrder
    parcelas?: SortOrder
    frequencia?: SortOrder
    user_id?: SortOrder
    card_id?: SortOrder
    category_id?: SortOrder
  }

  export type expensesMinOrderByAggregateInput = {
    id?: SortOrder
    metodo_pagamento?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    fixo?: SortOrder
    data?: SortOrder
    parcelas?: SortOrder
    frequencia?: SortOrder
    user_id?: SortOrder
    card_id?: SortOrder
    category_id?: SortOrder
  }

  export type expensesSumOrderByAggregateInput = {
    quantidade?: SortOrder
    parcelas?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ExpensesScalarRelationFilter = {
    is?: expensesWhereInput
    isNot?: expensesWhereInput
  }

  export type expense_historyCountOrderByAggregateInput = {
    id?: SortOrder
    expense_id?: SortOrder
    user_id?: SortOrder
    tipo?: SortOrder
    alteracao?: SortOrder
    data_alteracao?: SortOrder
  }

  export type expense_historyMaxOrderByAggregateInput = {
    id?: SortOrder
    expense_id?: SortOrder
    user_id?: SortOrder
    tipo?: SortOrder
    data_alteracao?: SortOrder
  }

  export type expense_historyMinOrderByAggregateInput = {
    id?: SortOrder
    expense_id?: SortOrder
    user_id?: SortOrder
    tipo?: SortOrder
    data_alteracao?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type incomesCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    nota?: SortOrder
    data?: SortOrder
    fonte?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
  }

  export type incomesAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type incomesMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    nota?: SortOrder
    data?: SortOrder
    fonte?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
  }

  export type incomesMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    quantidade?: SortOrder
    nota?: SortOrder
    data?: SortOrder
    fonte?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
  }

  export type incomesSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type investimentosCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    user_id?: SortOrder
  }

  export type investimentosAvgOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type investimentosMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    user_id?: SortOrder
  }

  export type investimentosMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    user_id?: SortOrder
  }

  export type investimentosSumOrderByAggregateInput = {
    quantidade?: SortOrder
  }

  export type CategoriasScalarRelationFilter = {
    is?: categoriasWhereInput
    isNot?: categoriasWhereInput
  }

  export type thresholdsUser_idCategory_idCompoundUniqueInput = {
    user_id: string
    category_id: string
  }

  export type thresholdsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
    valor?: SortOrder
  }

  export type thresholdsAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type thresholdsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
    valor?: SortOrder
  }

  export type thresholdsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    category_id?: SortOrder
    valor?: SortOrder
  }

  export type thresholdsSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type expensesCreateNestedManyWithoutUserInput = {
    create?: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput> | expensesCreateWithoutUserInput[] | expensesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutUserInput | expensesCreateOrConnectWithoutUserInput[]
    createMany?: expensesCreateManyUserInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type incomesCreateNestedManyWithoutUserInput = {
    create?: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput> | incomesCreateWithoutUserInput[] | incomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutUserInput | incomesCreateOrConnectWithoutUserInput[]
    createMany?: incomesCreateManyUserInputEnvelope
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
  }

  export type investimentosCreateNestedManyWithoutUserInput = {
    create?: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput> | investimentosCreateWithoutUserInput[] | investimentosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: investimentosCreateOrConnectWithoutUserInput | investimentosCreateOrConnectWithoutUserInput[]
    createMany?: investimentosCreateManyUserInputEnvelope
    connect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
  }

  export type categoriasCreateNestedManyWithoutUserInput = {
    create?: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput> | categoriasCreateWithoutUserInput[] | categoriasUncheckedCreateWithoutUserInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUserInput | categoriasCreateOrConnectWithoutUserInput[]
    createMany?: categoriasCreateManyUserInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type cardsCreateNestedManyWithoutUserInput = {
    create?: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput> | cardsCreateWithoutUserInput[] | cardsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cardsCreateOrConnectWithoutUserInput | cardsCreateOrConnectWithoutUserInput[]
    createMany?: cardsCreateManyUserInputEnvelope
    connect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
  }

  export type expense_historyCreateNestedManyWithoutUserInput = {
    create?: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput> | expense_historyCreateWithoutUserInput[] | expense_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutUserInput | expense_historyCreateOrConnectWithoutUserInput[]
    createMany?: expense_historyCreateManyUserInputEnvelope
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
  }

  export type thresholdsCreateNestedManyWithoutUserInput = {
    create?: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput> | thresholdsCreateWithoutUserInput[] | thresholdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutUserInput | thresholdsCreateOrConnectWithoutUserInput[]
    createMany?: thresholdsCreateManyUserInputEnvelope
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
  }

  export type expensesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput> | expensesCreateWithoutUserInput[] | expensesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutUserInput | expensesCreateOrConnectWithoutUserInput[]
    createMany?: expensesCreateManyUserInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type incomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput> | incomesCreateWithoutUserInput[] | incomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutUserInput | incomesCreateOrConnectWithoutUserInput[]
    createMany?: incomesCreateManyUserInputEnvelope
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
  }

  export type investimentosUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput> | investimentosCreateWithoutUserInput[] | investimentosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: investimentosCreateOrConnectWithoutUserInput | investimentosCreateOrConnectWithoutUserInput[]
    createMany?: investimentosCreateManyUserInputEnvelope
    connect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
  }

  export type categoriasUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput> | categoriasCreateWithoutUserInput[] | categoriasUncheckedCreateWithoutUserInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUserInput | categoriasCreateOrConnectWithoutUserInput[]
    createMany?: categoriasCreateManyUserInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type cardsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput> | cardsCreateWithoutUserInput[] | cardsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cardsCreateOrConnectWithoutUserInput | cardsCreateOrConnectWithoutUserInput[]
    createMany?: cardsCreateManyUserInputEnvelope
    connect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
  }

  export type expense_historyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput> | expense_historyCreateWithoutUserInput[] | expense_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutUserInput | expense_historyCreateOrConnectWithoutUserInput[]
    createMany?: expense_historyCreateManyUserInputEnvelope
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
  }

  export type thresholdsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput> | thresholdsCreateWithoutUserInput[] | thresholdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutUserInput | thresholdsCreateOrConnectWithoutUserInput[]
    createMany?: thresholdsCreateManyUserInputEnvelope
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type expensesUpdateManyWithoutUserNestedInput = {
    create?: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput> | expensesCreateWithoutUserInput[] | expensesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutUserInput | expensesCreateOrConnectWithoutUserInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutUserInput | expensesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: expensesCreateManyUserInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutUserInput | expensesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutUserInput | expensesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type incomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput> | incomesCreateWithoutUserInput[] | incomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutUserInput | incomesCreateOrConnectWithoutUserInput[]
    upsert?: incomesUpsertWithWhereUniqueWithoutUserInput | incomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: incomesCreateManyUserInputEnvelope
    set?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    disconnect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    delete?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    update?: incomesUpdateWithWhereUniqueWithoutUserInput | incomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: incomesUpdateManyWithWhereWithoutUserInput | incomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: incomesScalarWhereInput | incomesScalarWhereInput[]
  }

  export type investimentosUpdateManyWithoutUserNestedInput = {
    create?: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput> | investimentosCreateWithoutUserInput[] | investimentosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: investimentosCreateOrConnectWithoutUserInput | investimentosCreateOrConnectWithoutUserInput[]
    upsert?: investimentosUpsertWithWhereUniqueWithoutUserInput | investimentosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: investimentosCreateManyUserInputEnvelope
    set?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    disconnect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    delete?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    connect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    update?: investimentosUpdateWithWhereUniqueWithoutUserInput | investimentosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: investimentosUpdateManyWithWhereWithoutUserInput | investimentosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: investimentosScalarWhereInput | investimentosScalarWhereInput[]
  }

  export type categoriasUpdateManyWithoutUserNestedInput = {
    create?: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput> | categoriasCreateWithoutUserInput[] | categoriasUncheckedCreateWithoutUserInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUserInput | categoriasCreateOrConnectWithoutUserInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutUserInput | categoriasUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: categoriasCreateManyUserInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutUserInput | categoriasUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutUserInput | categoriasUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type cardsUpdateManyWithoutUserNestedInput = {
    create?: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput> | cardsCreateWithoutUserInput[] | cardsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cardsCreateOrConnectWithoutUserInput | cardsCreateOrConnectWithoutUserInput[]
    upsert?: cardsUpsertWithWhereUniqueWithoutUserInput | cardsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: cardsCreateManyUserInputEnvelope
    set?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    disconnect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    delete?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    connect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    update?: cardsUpdateWithWhereUniqueWithoutUserInput | cardsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: cardsUpdateManyWithWhereWithoutUserInput | cardsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: cardsScalarWhereInput | cardsScalarWhereInput[]
  }

  export type expense_historyUpdateManyWithoutUserNestedInput = {
    create?: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput> | expense_historyCreateWithoutUserInput[] | expense_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutUserInput | expense_historyCreateOrConnectWithoutUserInput[]
    upsert?: expense_historyUpsertWithWhereUniqueWithoutUserInput | expense_historyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: expense_historyCreateManyUserInputEnvelope
    set?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    disconnect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    delete?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    update?: expense_historyUpdateWithWhereUniqueWithoutUserInput | expense_historyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: expense_historyUpdateManyWithWhereWithoutUserInput | expense_historyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
  }

  export type thresholdsUpdateManyWithoutUserNestedInput = {
    create?: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput> | thresholdsCreateWithoutUserInput[] | thresholdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutUserInput | thresholdsCreateOrConnectWithoutUserInput[]
    upsert?: thresholdsUpsertWithWhereUniqueWithoutUserInput | thresholdsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: thresholdsCreateManyUserInputEnvelope
    set?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    disconnect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    delete?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    update?: thresholdsUpdateWithWhereUniqueWithoutUserInput | thresholdsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: thresholdsUpdateManyWithWhereWithoutUserInput | thresholdsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
  }

  export type expensesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput> | expensesCreateWithoutUserInput[] | expensesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutUserInput | expensesCreateOrConnectWithoutUserInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutUserInput | expensesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: expensesCreateManyUserInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutUserInput | expensesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutUserInput | expensesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type incomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput> | incomesCreateWithoutUserInput[] | incomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutUserInput | incomesCreateOrConnectWithoutUserInput[]
    upsert?: incomesUpsertWithWhereUniqueWithoutUserInput | incomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: incomesCreateManyUserInputEnvelope
    set?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    disconnect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    delete?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    update?: incomesUpdateWithWhereUniqueWithoutUserInput | incomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: incomesUpdateManyWithWhereWithoutUserInput | incomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: incomesScalarWhereInput | incomesScalarWhereInput[]
  }

  export type investimentosUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput> | investimentosCreateWithoutUserInput[] | investimentosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: investimentosCreateOrConnectWithoutUserInput | investimentosCreateOrConnectWithoutUserInput[]
    upsert?: investimentosUpsertWithWhereUniqueWithoutUserInput | investimentosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: investimentosCreateManyUserInputEnvelope
    set?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    disconnect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    delete?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    connect?: investimentosWhereUniqueInput | investimentosWhereUniqueInput[]
    update?: investimentosUpdateWithWhereUniqueWithoutUserInput | investimentosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: investimentosUpdateManyWithWhereWithoutUserInput | investimentosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: investimentosScalarWhereInput | investimentosScalarWhereInput[]
  }

  export type categoriasUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput> | categoriasCreateWithoutUserInput[] | categoriasUncheckedCreateWithoutUserInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutUserInput | categoriasCreateOrConnectWithoutUserInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutUserInput | categoriasUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: categoriasCreateManyUserInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutUserInput | categoriasUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutUserInput | categoriasUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type cardsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput> | cardsCreateWithoutUserInput[] | cardsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: cardsCreateOrConnectWithoutUserInput | cardsCreateOrConnectWithoutUserInput[]
    upsert?: cardsUpsertWithWhereUniqueWithoutUserInput | cardsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: cardsCreateManyUserInputEnvelope
    set?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    disconnect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    delete?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    connect?: cardsWhereUniqueInput | cardsWhereUniqueInput[]
    update?: cardsUpdateWithWhereUniqueWithoutUserInput | cardsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: cardsUpdateManyWithWhereWithoutUserInput | cardsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: cardsScalarWhereInput | cardsScalarWhereInput[]
  }

  export type expense_historyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput> | expense_historyCreateWithoutUserInput[] | expense_historyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutUserInput | expense_historyCreateOrConnectWithoutUserInput[]
    upsert?: expense_historyUpsertWithWhereUniqueWithoutUserInput | expense_historyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: expense_historyCreateManyUserInputEnvelope
    set?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    disconnect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    delete?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    update?: expense_historyUpdateWithWhereUniqueWithoutUserInput | expense_historyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: expense_historyUpdateManyWithWhereWithoutUserInput | expense_historyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
  }

  export type thresholdsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput> | thresholdsCreateWithoutUserInput[] | thresholdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutUserInput | thresholdsCreateOrConnectWithoutUserInput[]
    upsert?: thresholdsUpsertWithWhereUniqueWithoutUserInput | thresholdsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: thresholdsCreateManyUserInputEnvelope
    set?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    disconnect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    delete?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    update?: thresholdsUpdateWithWhereUniqueWithoutUserInput | thresholdsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: thresholdsUpdateManyWithWhereWithoutUserInput | thresholdsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<usersCreateWithoutCategoriasInput, usersUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: usersCreateOrConnectWithoutCategoriasInput
    connect?: usersWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutChildrenInput = {
    create?: XOR<categoriasCreateWithoutChildrenInput, categoriasUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutChildrenInput
    connect?: categoriasWhereUniqueInput
  }

  export type categoriasCreateNestedManyWithoutParentInput = {
    create?: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput> | categoriasCreateWithoutParentInput[] | categoriasUncheckedCreateWithoutParentInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutParentInput | categoriasCreateOrConnectWithoutParentInput[]
    createMany?: categoriasCreateManyParentInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type expensesCreateNestedManyWithoutCategoryInput = {
    create?: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput> | expensesCreateWithoutCategoryInput[] | expensesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCategoryInput | expensesCreateOrConnectWithoutCategoryInput[]
    createMany?: expensesCreateManyCategoryInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type incomesCreateNestedManyWithoutCategoryInput = {
    create?: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput> | incomesCreateWithoutCategoryInput[] | incomesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutCategoryInput | incomesCreateOrConnectWithoutCategoryInput[]
    createMany?: incomesCreateManyCategoryInputEnvelope
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
  }

  export type thresholdsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput> | thresholdsCreateWithoutCategoryInput[] | thresholdsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutCategoryInput | thresholdsCreateOrConnectWithoutCategoryInput[]
    createMany?: thresholdsCreateManyCategoryInputEnvelope
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
  }

  export type categoriasUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput> | categoriasCreateWithoutParentInput[] | categoriasUncheckedCreateWithoutParentInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutParentInput | categoriasCreateOrConnectWithoutParentInput[]
    createMany?: categoriasCreateManyParentInputEnvelope
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
  }

  export type expensesUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput> | expensesCreateWithoutCategoryInput[] | expensesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCategoryInput | expensesCreateOrConnectWithoutCategoryInput[]
    createMany?: expensesCreateManyCategoryInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type incomesUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput> | incomesCreateWithoutCategoryInput[] | incomesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutCategoryInput | incomesCreateOrConnectWithoutCategoryInput[]
    createMany?: incomesCreateManyCategoryInputEnvelope
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
  }

  export type thresholdsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput> | thresholdsCreateWithoutCategoryInput[] | thresholdsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutCategoryInput | thresholdsCreateOrConnectWithoutCategoryInput[]
    createMany?: thresholdsCreateManyCategoryInputEnvelope
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
  }

  export type usersUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<usersCreateWithoutCategoriasInput, usersUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: usersCreateOrConnectWithoutCategoriasInput
    upsert?: usersUpsertWithoutCategoriasInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCategoriasInput, usersUpdateWithoutCategoriasInput>, usersUncheckedUpdateWithoutCategoriasInput>
  }

  export type categoriasUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<categoriasCreateWithoutChildrenInput, categoriasUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutChildrenInput
    upsert?: categoriasUpsertWithoutChildrenInput
    disconnect?: categoriasWhereInput | boolean
    delete?: categoriasWhereInput | boolean
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutChildrenInput, categoriasUpdateWithoutChildrenInput>, categoriasUncheckedUpdateWithoutChildrenInput>
  }

  export type categoriasUpdateManyWithoutParentNestedInput = {
    create?: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput> | categoriasCreateWithoutParentInput[] | categoriasUncheckedCreateWithoutParentInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutParentInput | categoriasCreateOrConnectWithoutParentInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutParentInput | categoriasUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: categoriasCreateManyParentInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutParentInput | categoriasUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutParentInput | categoriasUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type expensesUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput> | expensesCreateWithoutCategoryInput[] | expensesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCategoryInput | expensesCreateOrConnectWithoutCategoryInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutCategoryInput | expensesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: expensesCreateManyCategoryInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutCategoryInput | expensesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutCategoryInput | expensesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type incomesUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput> | incomesCreateWithoutCategoryInput[] | incomesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutCategoryInput | incomesCreateOrConnectWithoutCategoryInput[]
    upsert?: incomesUpsertWithWhereUniqueWithoutCategoryInput | incomesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: incomesCreateManyCategoryInputEnvelope
    set?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    disconnect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    delete?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    update?: incomesUpdateWithWhereUniqueWithoutCategoryInput | incomesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: incomesUpdateManyWithWhereWithoutCategoryInput | incomesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: incomesScalarWhereInput | incomesScalarWhereInput[]
  }

  export type thresholdsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput> | thresholdsCreateWithoutCategoryInput[] | thresholdsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutCategoryInput | thresholdsCreateOrConnectWithoutCategoryInput[]
    upsert?: thresholdsUpsertWithWhereUniqueWithoutCategoryInput | thresholdsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: thresholdsCreateManyCategoryInputEnvelope
    set?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    disconnect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    delete?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    update?: thresholdsUpdateWithWhereUniqueWithoutCategoryInput | thresholdsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: thresholdsUpdateManyWithWhereWithoutCategoryInput | thresholdsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoriasUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput> | categoriasCreateWithoutParentInput[] | categoriasUncheckedCreateWithoutParentInput[]
    connectOrCreate?: categoriasCreateOrConnectWithoutParentInput | categoriasCreateOrConnectWithoutParentInput[]
    upsert?: categoriasUpsertWithWhereUniqueWithoutParentInput | categoriasUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: categoriasCreateManyParentInputEnvelope
    set?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    disconnect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    delete?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    connect?: categoriasWhereUniqueInput | categoriasWhereUniqueInput[]
    update?: categoriasUpdateWithWhereUniqueWithoutParentInput | categoriasUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: categoriasUpdateManyWithWhereWithoutParentInput | categoriasUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
  }

  export type expensesUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput> | expensesCreateWithoutCategoryInput[] | expensesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCategoryInput | expensesCreateOrConnectWithoutCategoryInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutCategoryInput | expensesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: expensesCreateManyCategoryInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutCategoryInput | expensesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutCategoryInput | expensesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type incomesUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput> | incomesCreateWithoutCategoryInput[] | incomesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: incomesCreateOrConnectWithoutCategoryInput | incomesCreateOrConnectWithoutCategoryInput[]
    upsert?: incomesUpsertWithWhereUniqueWithoutCategoryInput | incomesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: incomesCreateManyCategoryInputEnvelope
    set?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    disconnect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    delete?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    connect?: incomesWhereUniqueInput | incomesWhereUniqueInput[]
    update?: incomesUpdateWithWhereUniqueWithoutCategoryInput | incomesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: incomesUpdateManyWithWhereWithoutCategoryInput | incomesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: incomesScalarWhereInput | incomesScalarWhereInput[]
  }

  export type thresholdsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput> | thresholdsCreateWithoutCategoryInput[] | thresholdsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: thresholdsCreateOrConnectWithoutCategoryInput | thresholdsCreateOrConnectWithoutCategoryInput[]
    upsert?: thresholdsUpsertWithWhereUniqueWithoutCategoryInput | thresholdsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: thresholdsCreateManyCategoryInputEnvelope
    set?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    disconnect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    delete?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    connect?: thresholdsWhereUniqueInput | thresholdsWhereUniqueInput[]
    update?: thresholdsUpdateWithWhereUniqueWithoutCategoryInput | thresholdsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: thresholdsUpdateManyWithWhereWithoutCategoryInput | thresholdsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutCardsInput = {
    create?: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCardsInput
    connect?: usersWhereUniqueInput
  }

  export type expensesCreateNestedManyWithoutCardInput = {
    create?: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput> | expensesCreateWithoutCardInput[] | expensesUncheckedCreateWithoutCardInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCardInput | expensesCreateOrConnectWithoutCardInput[]
    createMany?: expensesCreateManyCardInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type expensesUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput> | expensesCreateWithoutCardInput[] | expensesUncheckedCreateWithoutCardInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCardInput | expensesCreateOrConnectWithoutCardInput[]
    createMany?: expensesCreateManyCardInputEnvelope
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCardsInput
    upsert?: usersUpsertWithoutCardsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCardsInput, usersUpdateWithoutCardsInput>, usersUncheckedUpdateWithoutCardsInput>
  }

  export type expensesUpdateManyWithoutCardNestedInput = {
    create?: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput> | expensesCreateWithoutCardInput[] | expensesUncheckedCreateWithoutCardInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCardInput | expensesCreateOrConnectWithoutCardInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutCardInput | expensesUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: expensesCreateManyCardInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutCardInput | expensesUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutCardInput | expensesUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type expensesUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput> | expensesCreateWithoutCardInput[] | expensesUncheckedCreateWithoutCardInput[]
    connectOrCreate?: expensesCreateOrConnectWithoutCardInput | expensesCreateOrConnectWithoutCardInput[]
    upsert?: expensesUpsertWithWhereUniqueWithoutCardInput | expensesUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: expensesCreateManyCardInputEnvelope
    set?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    disconnect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    delete?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    connect?: expensesWhereUniqueInput | expensesWhereUniqueInput[]
    update?: expensesUpdateWithWhereUniqueWithoutCardInput | expensesUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: expensesUpdateManyWithWhereWithoutCardInput | expensesUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: expensesScalarWhereInput | expensesScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutExpensesInput = {
    create?: XOR<usersCreateWithoutExpensesInput, usersUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: usersCreateOrConnectWithoutExpensesInput
    connect?: usersWhereUniqueInput
  }

  export type cardsCreateNestedOneWithoutExpensesInput = {
    create?: XOR<cardsCreateWithoutExpensesInput, cardsUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: cardsCreateOrConnectWithoutExpensesInput
    connect?: cardsWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutExpensesInput = {
    create?: XOR<categoriasCreateWithoutExpensesInput, categoriasUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutExpensesInput
    connect?: categoriasWhereUniqueInput
  }

  export type expense_historyCreateNestedManyWithoutExpenseInput = {
    create?: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput> | expense_historyCreateWithoutExpenseInput[] | expense_historyUncheckedCreateWithoutExpenseInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutExpenseInput | expense_historyCreateOrConnectWithoutExpenseInput[]
    createMany?: expense_historyCreateManyExpenseInputEnvelope
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
  }

  export type expense_historyUncheckedCreateNestedManyWithoutExpenseInput = {
    create?: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput> | expense_historyCreateWithoutExpenseInput[] | expense_historyUncheckedCreateWithoutExpenseInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutExpenseInput | expense_historyCreateOrConnectWithoutExpenseInput[]
    createMany?: expense_historyCreateManyExpenseInputEnvelope
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<usersCreateWithoutExpensesInput, usersUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: usersCreateOrConnectWithoutExpensesInput
    upsert?: usersUpsertWithoutExpensesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutExpensesInput, usersUpdateWithoutExpensesInput>, usersUncheckedUpdateWithoutExpensesInput>
  }

  export type cardsUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<cardsCreateWithoutExpensesInput, cardsUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: cardsCreateOrConnectWithoutExpensesInput
    upsert?: cardsUpsertWithoutExpensesInput
    disconnect?: cardsWhereInput | boolean
    delete?: cardsWhereInput | boolean
    connect?: cardsWhereUniqueInput
    update?: XOR<XOR<cardsUpdateToOneWithWhereWithoutExpensesInput, cardsUpdateWithoutExpensesInput>, cardsUncheckedUpdateWithoutExpensesInput>
  }

  export type categoriasUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<categoriasCreateWithoutExpensesInput, categoriasUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutExpensesInput
    upsert?: categoriasUpsertWithoutExpensesInput
    disconnect?: categoriasWhereInput | boolean
    delete?: categoriasWhereInput | boolean
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutExpensesInput, categoriasUpdateWithoutExpensesInput>, categoriasUncheckedUpdateWithoutExpensesInput>
  }

  export type expense_historyUpdateManyWithoutExpenseNestedInput = {
    create?: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput> | expense_historyCreateWithoutExpenseInput[] | expense_historyUncheckedCreateWithoutExpenseInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutExpenseInput | expense_historyCreateOrConnectWithoutExpenseInput[]
    upsert?: expense_historyUpsertWithWhereUniqueWithoutExpenseInput | expense_historyUpsertWithWhereUniqueWithoutExpenseInput[]
    createMany?: expense_historyCreateManyExpenseInputEnvelope
    set?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    disconnect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    delete?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    update?: expense_historyUpdateWithWhereUniqueWithoutExpenseInput | expense_historyUpdateWithWhereUniqueWithoutExpenseInput[]
    updateMany?: expense_historyUpdateManyWithWhereWithoutExpenseInput | expense_historyUpdateManyWithWhereWithoutExpenseInput[]
    deleteMany?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
  }

  export type expense_historyUncheckedUpdateManyWithoutExpenseNestedInput = {
    create?: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput> | expense_historyCreateWithoutExpenseInput[] | expense_historyUncheckedCreateWithoutExpenseInput[]
    connectOrCreate?: expense_historyCreateOrConnectWithoutExpenseInput | expense_historyCreateOrConnectWithoutExpenseInput[]
    upsert?: expense_historyUpsertWithWhereUniqueWithoutExpenseInput | expense_historyUpsertWithWhereUniqueWithoutExpenseInput[]
    createMany?: expense_historyCreateManyExpenseInputEnvelope
    set?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    disconnect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    delete?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    connect?: expense_historyWhereUniqueInput | expense_historyWhereUniqueInput[]
    update?: expense_historyUpdateWithWhereUniqueWithoutExpenseInput | expense_historyUpdateWithWhereUniqueWithoutExpenseInput[]
    updateMany?: expense_historyUpdateManyWithWhereWithoutExpenseInput | expense_historyUpdateManyWithWhereWithoutExpenseInput[]
    deleteMany?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutExpense_historyInput = {
    create?: XOR<usersCreateWithoutExpense_historyInput, usersUncheckedCreateWithoutExpense_historyInput>
    connectOrCreate?: usersCreateOrConnectWithoutExpense_historyInput
    connect?: usersWhereUniqueInput
  }

  export type expensesCreateNestedOneWithoutHistoryInput = {
    create?: XOR<expensesCreateWithoutHistoryInput, expensesUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: expensesCreateOrConnectWithoutHistoryInput
    connect?: expensesWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutExpense_historyNestedInput = {
    create?: XOR<usersCreateWithoutExpense_historyInput, usersUncheckedCreateWithoutExpense_historyInput>
    connectOrCreate?: usersCreateOrConnectWithoutExpense_historyInput
    upsert?: usersUpsertWithoutExpense_historyInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutExpense_historyInput, usersUpdateWithoutExpense_historyInput>, usersUncheckedUpdateWithoutExpense_historyInput>
  }

  export type expensesUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<expensesCreateWithoutHistoryInput, expensesUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: expensesCreateOrConnectWithoutHistoryInput
    upsert?: expensesUpsertWithoutHistoryInput
    connect?: expensesWhereUniqueInput
    update?: XOR<XOR<expensesUpdateToOneWithWhereWithoutHistoryInput, expensesUpdateWithoutHistoryInput>, expensesUncheckedUpdateWithoutHistoryInput>
  }

  export type usersCreateNestedOneWithoutIncomesInput = {
    create?: XOR<usersCreateWithoutIncomesInput, usersUncheckedCreateWithoutIncomesInput>
    connectOrCreate?: usersCreateOrConnectWithoutIncomesInput
    connect?: usersWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutIncomesInput = {
    create?: XOR<categoriasCreateWithoutIncomesInput, categoriasUncheckedCreateWithoutIncomesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutIncomesInput
    connect?: categoriasWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutIncomesNestedInput = {
    create?: XOR<usersCreateWithoutIncomesInput, usersUncheckedCreateWithoutIncomesInput>
    connectOrCreate?: usersCreateOrConnectWithoutIncomesInput
    upsert?: usersUpsertWithoutIncomesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutIncomesInput, usersUpdateWithoutIncomesInput>, usersUncheckedUpdateWithoutIncomesInput>
  }

  export type categoriasUpdateOneWithoutIncomesNestedInput = {
    create?: XOR<categoriasCreateWithoutIncomesInput, categoriasUncheckedCreateWithoutIncomesInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutIncomesInput
    upsert?: categoriasUpsertWithoutIncomesInput
    disconnect?: categoriasWhereInput | boolean
    delete?: categoriasWhereInput | boolean
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutIncomesInput, categoriasUpdateWithoutIncomesInput>, categoriasUncheckedUpdateWithoutIncomesInput>
  }

  export type usersCreateNestedOneWithoutInvestmentsInput = {
    create?: XOR<usersCreateWithoutInvestmentsInput, usersUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutInvestmentsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutInvestmentsNestedInput = {
    create?: XOR<usersCreateWithoutInvestmentsInput, usersUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutInvestmentsInput
    upsert?: usersUpsertWithoutInvestmentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutInvestmentsInput, usersUpdateWithoutInvestmentsInput>, usersUncheckedUpdateWithoutInvestmentsInput>
  }

  export type usersCreateNestedOneWithoutThresholdsInput = {
    create?: XOR<usersCreateWithoutThresholdsInput, usersUncheckedCreateWithoutThresholdsInput>
    connectOrCreate?: usersCreateOrConnectWithoutThresholdsInput
    connect?: usersWhereUniqueInput
  }

  export type categoriasCreateNestedOneWithoutThresholdsInput = {
    create?: XOR<categoriasCreateWithoutThresholdsInput, categoriasUncheckedCreateWithoutThresholdsInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutThresholdsInput
    connect?: categoriasWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutThresholdsNestedInput = {
    create?: XOR<usersCreateWithoutThresholdsInput, usersUncheckedCreateWithoutThresholdsInput>
    connectOrCreate?: usersCreateOrConnectWithoutThresholdsInput
    upsert?: usersUpsertWithoutThresholdsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutThresholdsInput, usersUpdateWithoutThresholdsInput>, usersUncheckedUpdateWithoutThresholdsInput>
  }

  export type categoriasUpdateOneRequiredWithoutThresholdsNestedInput = {
    create?: XOR<categoriasCreateWithoutThresholdsInput, categoriasUncheckedCreateWithoutThresholdsInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutThresholdsInput
    upsert?: categoriasUpsertWithoutThresholdsInput
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutThresholdsInput, categoriasUpdateWithoutThresholdsInput>, categoriasUncheckedUpdateWithoutThresholdsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type expensesCreateWithoutUserInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    card?: cardsCreateNestedOneWithoutExpensesInput
    category?: categoriasCreateNestedOneWithoutExpensesInput
    history?: expense_historyCreateNestedManyWithoutExpenseInput
  }

  export type expensesUncheckedCreateWithoutUserInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    card_id?: string | null
    category_id?: string | null
    history?: expense_historyUncheckedCreateNestedManyWithoutExpenseInput
  }

  export type expensesCreateOrConnectWithoutUserInput = {
    where: expensesWhereUniqueInput
    create: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput>
  }

  export type expensesCreateManyUserInputEnvelope = {
    data: expensesCreateManyUserInput | expensesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type incomesCreateWithoutUserInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    category?: categoriasCreateNestedOneWithoutIncomesInput
  }

  export type incomesUncheckedCreateWithoutUserInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    category_id?: string | null
  }

  export type incomesCreateOrConnectWithoutUserInput = {
    where: incomesWhereUniqueInput
    create: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput>
  }

  export type incomesCreateManyUserInputEnvelope = {
    data: incomesCreateManyUserInput | incomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type investimentosCreateWithoutUserInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
  }

  export type investimentosUncheckedCreateWithoutUserInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
  }

  export type investimentosCreateOrConnectWithoutUserInput = {
    where: investimentosWhereUniqueInput
    create: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput>
  }

  export type investimentosCreateManyUserInputEnvelope = {
    data: investimentosCreateManyUserInput | investimentosCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type categoriasCreateWithoutUserInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    children?: categoriasCreateNestedManyWithoutParentInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutUserInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput>
  }

  export type categoriasCreateManyUserInputEnvelope = {
    data: categoriasCreateManyUserInput | categoriasCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type cardsCreateWithoutUserInput = {
    id?: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
    expenses?: expensesCreateNestedManyWithoutCardInput
  }

  export type cardsUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
    expenses?: expensesUncheckedCreateNestedManyWithoutCardInput
  }

  export type cardsCreateOrConnectWithoutUserInput = {
    where: cardsWhereUniqueInput
    create: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput>
  }

  export type cardsCreateManyUserInputEnvelope = {
    data: cardsCreateManyUserInput | cardsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type expense_historyCreateWithoutUserInput = {
    id?: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
    expense: expensesCreateNestedOneWithoutHistoryInput
  }

  export type expense_historyUncheckedCreateWithoutUserInput = {
    id?: string
    expense_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type expense_historyCreateOrConnectWithoutUserInput = {
    where: expense_historyWhereUniqueInput
    create: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput>
  }

  export type expense_historyCreateManyUserInputEnvelope = {
    data: expense_historyCreateManyUserInput | expense_historyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type thresholdsCreateWithoutUserInput = {
    id?: string
    valor: number
    category: categoriasCreateNestedOneWithoutThresholdsInput
  }

  export type thresholdsUncheckedCreateWithoutUserInput = {
    id?: string
    category_id: string
    valor: number
  }

  export type thresholdsCreateOrConnectWithoutUserInput = {
    where: thresholdsWhereUniqueInput
    create: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput>
  }

  export type thresholdsCreateManyUserInputEnvelope = {
    data: thresholdsCreateManyUserInput | thresholdsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type expensesUpsertWithWhereUniqueWithoutUserInput = {
    where: expensesWhereUniqueInput
    update: XOR<expensesUpdateWithoutUserInput, expensesUncheckedUpdateWithoutUserInput>
    create: XOR<expensesCreateWithoutUserInput, expensesUncheckedCreateWithoutUserInput>
  }

  export type expensesUpdateWithWhereUniqueWithoutUserInput = {
    where: expensesWhereUniqueInput
    data: XOR<expensesUpdateWithoutUserInput, expensesUncheckedUpdateWithoutUserInput>
  }

  export type expensesUpdateManyWithWhereWithoutUserInput = {
    where: expensesScalarWhereInput
    data: XOR<expensesUpdateManyMutationInput, expensesUncheckedUpdateManyWithoutUserInput>
  }

  export type expensesScalarWhereInput = {
    AND?: expensesScalarWhereInput | expensesScalarWhereInput[]
    OR?: expensesScalarWhereInput[]
    NOT?: expensesScalarWhereInput | expensesScalarWhereInput[]
    id?: StringFilter<"expenses"> | string
    metodo_pagamento?: StringFilter<"expenses"> | string
    tipo?: StringFilter<"expenses"> | string
    quantidade?: FloatFilter<"expenses"> | number
    fixo?: BoolFilter<"expenses"> | boolean
    data?: DateTimeFilter<"expenses"> | Date | string
    parcelas?: IntNullableFilter<"expenses"> | number | null
    frequencia?: StringNullableFilter<"expenses"> | string | null
    user_id?: StringFilter<"expenses"> | string
    card_id?: StringNullableFilter<"expenses"> | string | null
    category_id?: StringNullableFilter<"expenses"> | string | null
  }

  export type incomesUpsertWithWhereUniqueWithoutUserInput = {
    where: incomesWhereUniqueInput
    update: XOR<incomesUpdateWithoutUserInput, incomesUncheckedUpdateWithoutUserInput>
    create: XOR<incomesCreateWithoutUserInput, incomesUncheckedCreateWithoutUserInput>
  }

  export type incomesUpdateWithWhereUniqueWithoutUserInput = {
    where: incomesWhereUniqueInput
    data: XOR<incomesUpdateWithoutUserInput, incomesUncheckedUpdateWithoutUserInput>
  }

  export type incomesUpdateManyWithWhereWithoutUserInput = {
    where: incomesScalarWhereInput
    data: XOR<incomesUpdateManyMutationInput, incomesUncheckedUpdateManyWithoutUserInput>
  }

  export type incomesScalarWhereInput = {
    AND?: incomesScalarWhereInput | incomesScalarWhereInput[]
    OR?: incomesScalarWhereInput[]
    NOT?: incomesScalarWhereInput | incomesScalarWhereInput[]
    id?: StringFilter<"incomes"> | string
    tipo?: StringFilter<"incomes"> | string
    quantidade?: FloatFilter<"incomes"> | number
    nota?: StringNullableFilter<"incomes"> | string | null
    data?: DateTimeFilter<"incomes"> | Date | string
    fonte?: StringFilter<"incomes"> | string
    user_id?: StringFilter<"incomes"> | string
    category_id?: StringNullableFilter<"incomes"> | string | null
  }

  export type investimentosUpsertWithWhereUniqueWithoutUserInput = {
    where: investimentosWhereUniqueInput
    update: XOR<investimentosUpdateWithoutUserInput, investimentosUncheckedUpdateWithoutUserInput>
    create: XOR<investimentosCreateWithoutUserInput, investimentosUncheckedCreateWithoutUserInput>
  }

  export type investimentosUpdateWithWhereUniqueWithoutUserInput = {
    where: investimentosWhereUniqueInput
    data: XOR<investimentosUpdateWithoutUserInput, investimentosUncheckedUpdateWithoutUserInput>
  }

  export type investimentosUpdateManyWithWhereWithoutUserInput = {
    where: investimentosScalarWhereInput
    data: XOR<investimentosUpdateManyMutationInput, investimentosUncheckedUpdateManyWithoutUserInput>
  }

  export type investimentosScalarWhereInput = {
    AND?: investimentosScalarWhereInput | investimentosScalarWhereInput[]
    OR?: investimentosScalarWhereInput[]
    NOT?: investimentosScalarWhereInput | investimentosScalarWhereInput[]
    id?: StringFilter<"investimentos"> | string
    tipo?: StringFilter<"investimentos"> | string
    nome?: StringFilter<"investimentos"> | string
    quantidade?: FloatFilter<"investimentos"> | number
    descricao?: StringNullableFilter<"investimentos"> | string | null
    data?: DateTimeFilter<"investimentos"> | Date | string
    user_id?: StringFilter<"investimentos"> | string
  }

  export type categoriasUpsertWithWhereUniqueWithoutUserInput = {
    where: categoriasWhereUniqueInput
    update: XOR<categoriasUpdateWithoutUserInput, categoriasUncheckedUpdateWithoutUserInput>
    create: XOR<categoriasCreateWithoutUserInput, categoriasUncheckedCreateWithoutUserInput>
  }

  export type categoriasUpdateWithWhereUniqueWithoutUserInput = {
    where: categoriasWhereUniqueInput
    data: XOR<categoriasUpdateWithoutUserInput, categoriasUncheckedUpdateWithoutUserInput>
  }

  export type categoriasUpdateManyWithWhereWithoutUserInput = {
    where: categoriasScalarWhereInput
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyWithoutUserInput>
  }

  export type categoriasScalarWhereInput = {
    AND?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
    OR?: categoriasScalarWhereInput[]
    NOT?: categoriasScalarWhereInput | categoriasScalarWhereInput[]
    id?: StringFilter<"categorias"> | string
    nome?: StringFilter<"categorias"> | string
    cor?: StringFilter<"categorias"> | string
    tipo?: StringFilter<"categorias"> | string
    parent_id?: StringNullableFilter<"categorias"> | string | null
    user_id?: StringFilter<"categorias"> | string
  }

  export type cardsUpsertWithWhereUniqueWithoutUserInput = {
    where: cardsWhereUniqueInput
    update: XOR<cardsUpdateWithoutUserInput, cardsUncheckedUpdateWithoutUserInput>
    create: XOR<cardsCreateWithoutUserInput, cardsUncheckedCreateWithoutUserInput>
  }

  export type cardsUpdateWithWhereUniqueWithoutUserInput = {
    where: cardsWhereUniqueInput
    data: XOR<cardsUpdateWithoutUserInput, cardsUncheckedUpdateWithoutUserInput>
  }

  export type cardsUpdateManyWithWhereWithoutUserInput = {
    where: cardsScalarWhereInput
    data: XOR<cardsUpdateManyMutationInput, cardsUncheckedUpdateManyWithoutUserInput>
  }

  export type cardsScalarWhereInput = {
    AND?: cardsScalarWhereInput | cardsScalarWhereInput[]
    OR?: cardsScalarWhereInput[]
    NOT?: cardsScalarWhereInput | cardsScalarWhereInput[]
    id?: StringFilter<"cards"> | string
    user_id?: StringFilter<"cards"> | string
    nome?: StringFilter<"cards"> | string
    tipo?: StringFilter<"cards"> | string
    numero?: StringFilter<"cards"> | string
    cor?: StringFilter<"cards"> | string
    limite?: FloatFilter<"cards"> | number
    dia_vencimento?: IntNullableFilter<"cards"> | number | null
  }

  export type expense_historyUpsertWithWhereUniqueWithoutUserInput = {
    where: expense_historyWhereUniqueInput
    update: XOR<expense_historyUpdateWithoutUserInput, expense_historyUncheckedUpdateWithoutUserInput>
    create: XOR<expense_historyCreateWithoutUserInput, expense_historyUncheckedCreateWithoutUserInput>
  }

  export type expense_historyUpdateWithWhereUniqueWithoutUserInput = {
    where: expense_historyWhereUniqueInput
    data: XOR<expense_historyUpdateWithoutUserInput, expense_historyUncheckedUpdateWithoutUserInput>
  }

  export type expense_historyUpdateManyWithWhereWithoutUserInput = {
    where: expense_historyScalarWhereInput
    data: XOR<expense_historyUpdateManyMutationInput, expense_historyUncheckedUpdateManyWithoutUserInput>
  }

  export type expense_historyScalarWhereInput = {
    AND?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
    OR?: expense_historyScalarWhereInput[]
    NOT?: expense_historyScalarWhereInput | expense_historyScalarWhereInput[]
    id?: StringFilter<"expense_history"> | string
    expense_id?: StringFilter<"expense_history"> | string
    user_id?: StringFilter<"expense_history"> | string
    tipo?: StringFilter<"expense_history"> | string
    alteracao?: JsonFilter<"expense_history">
    data_alteracao?: DateTimeFilter<"expense_history"> | Date | string
  }

  export type thresholdsUpsertWithWhereUniqueWithoutUserInput = {
    where: thresholdsWhereUniqueInput
    update: XOR<thresholdsUpdateWithoutUserInput, thresholdsUncheckedUpdateWithoutUserInput>
    create: XOR<thresholdsCreateWithoutUserInput, thresholdsUncheckedCreateWithoutUserInput>
  }

  export type thresholdsUpdateWithWhereUniqueWithoutUserInput = {
    where: thresholdsWhereUniqueInput
    data: XOR<thresholdsUpdateWithoutUserInput, thresholdsUncheckedUpdateWithoutUserInput>
  }

  export type thresholdsUpdateManyWithWhereWithoutUserInput = {
    where: thresholdsScalarWhereInput
    data: XOR<thresholdsUpdateManyMutationInput, thresholdsUncheckedUpdateManyWithoutUserInput>
  }

  export type thresholdsScalarWhereInput = {
    AND?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
    OR?: thresholdsScalarWhereInput[]
    NOT?: thresholdsScalarWhereInput | thresholdsScalarWhereInput[]
    id?: StringFilter<"thresholds"> | string
    user_id?: StringFilter<"thresholds"> | string
    category_id?: StringFilter<"thresholds"> | string
    valor?: FloatFilter<"thresholds"> | number
  }

  export type usersCreateWithoutCategoriasInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutCategoriasInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutCategoriasInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCategoriasInput, usersUncheckedCreateWithoutCategoriasInput>
  }

  export type categoriasCreateWithoutChildrenInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutChildrenInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutChildrenInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutChildrenInput, categoriasUncheckedCreateWithoutChildrenInput>
  }

  export type categoriasCreateWithoutParentInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    children?: categoriasCreateNestedManyWithoutParentInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutParentInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user_id: string
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutParentInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput>
  }

  export type categoriasCreateManyParentInputEnvelope = {
    data: categoriasCreateManyParentInput | categoriasCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type expensesCreateWithoutCategoryInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user: usersCreateNestedOneWithoutExpensesInput
    card?: cardsCreateNestedOneWithoutExpensesInput
    history?: expense_historyCreateNestedManyWithoutExpenseInput
  }

  export type expensesUncheckedCreateWithoutCategoryInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    card_id?: string | null
    history?: expense_historyUncheckedCreateNestedManyWithoutExpenseInput
  }

  export type expensesCreateOrConnectWithoutCategoryInput = {
    where: expensesWhereUniqueInput
    create: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput>
  }

  export type expensesCreateManyCategoryInputEnvelope = {
    data: expensesCreateManyCategoryInput | expensesCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type incomesCreateWithoutCategoryInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user: usersCreateNestedOneWithoutIncomesInput
  }

  export type incomesUncheckedCreateWithoutCategoryInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user_id: string
  }

  export type incomesCreateOrConnectWithoutCategoryInput = {
    where: incomesWhereUniqueInput
    create: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput>
  }

  export type incomesCreateManyCategoryInputEnvelope = {
    data: incomesCreateManyCategoryInput | incomesCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type thresholdsCreateWithoutCategoryInput = {
    id?: string
    valor: number
    user: usersCreateNestedOneWithoutThresholdsInput
  }

  export type thresholdsUncheckedCreateWithoutCategoryInput = {
    id?: string
    user_id: string
    valor: number
  }

  export type thresholdsCreateOrConnectWithoutCategoryInput = {
    where: thresholdsWhereUniqueInput
    create: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput>
  }

  export type thresholdsCreateManyCategoryInputEnvelope = {
    data: thresholdsCreateManyCategoryInput | thresholdsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCategoriasInput = {
    update: XOR<usersUpdateWithoutCategoriasInput, usersUncheckedUpdateWithoutCategoriasInput>
    create: XOR<usersCreateWithoutCategoriasInput, usersUncheckedCreateWithoutCategoriasInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCategoriasInput, usersUncheckedUpdateWithoutCategoriasInput>
  }

  export type usersUpdateWithoutCategoriasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutCategoriasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type categoriasUpsertWithoutChildrenInput = {
    update: XOR<categoriasUpdateWithoutChildrenInput, categoriasUncheckedUpdateWithoutChildrenInput>
    create: XOR<categoriasCreateWithoutChildrenInput, categoriasUncheckedCreateWithoutChildrenInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutChildrenInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutChildrenInput, categoriasUncheckedUpdateWithoutChildrenInput>
  }

  export type categoriasUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUpsertWithWhereUniqueWithoutParentInput = {
    where: categoriasWhereUniqueInput
    update: XOR<categoriasUpdateWithoutParentInput, categoriasUncheckedUpdateWithoutParentInput>
    create: XOR<categoriasCreateWithoutParentInput, categoriasUncheckedCreateWithoutParentInput>
  }

  export type categoriasUpdateWithWhereUniqueWithoutParentInput = {
    where: categoriasWhereUniqueInput
    data: XOR<categoriasUpdateWithoutParentInput, categoriasUncheckedUpdateWithoutParentInput>
  }

  export type categoriasUpdateManyWithWhereWithoutParentInput = {
    where: categoriasScalarWhereInput
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyWithoutParentInput>
  }

  export type expensesUpsertWithWhereUniqueWithoutCategoryInput = {
    where: expensesWhereUniqueInput
    update: XOR<expensesUpdateWithoutCategoryInput, expensesUncheckedUpdateWithoutCategoryInput>
    create: XOR<expensesCreateWithoutCategoryInput, expensesUncheckedCreateWithoutCategoryInput>
  }

  export type expensesUpdateWithWhereUniqueWithoutCategoryInput = {
    where: expensesWhereUniqueInput
    data: XOR<expensesUpdateWithoutCategoryInput, expensesUncheckedUpdateWithoutCategoryInput>
  }

  export type expensesUpdateManyWithWhereWithoutCategoryInput = {
    where: expensesScalarWhereInput
    data: XOR<expensesUpdateManyMutationInput, expensesUncheckedUpdateManyWithoutCategoryInput>
  }

  export type incomesUpsertWithWhereUniqueWithoutCategoryInput = {
    where: incomesWhereUniqueInput
    update: XOR<incomesUpdateWithoutCategoryInput, incomesUncheckedUpdateWithoutCategoryInput>
    create: XOR<incomesCreateWithoutCategoryInput, incomesUncheckedCreateWithoutCategoryInput>
  }

  export type incomesUpdateWithWhereUniqueWithoutCategoryInput = {
    where: incomesWhereUniqueInput
    data: XOR<incomesUpdateWithoutCategoryInput, incomesUncheckedUpdateWithoutCategoryInput>
  }

  export type incomesUpdateManyWithWhereWithoutCategoryInput = {
    where: incomesScalarWhereInput
    data: XOR<incomesUpdateManyMutationInput, incomesUncheckedUpdateManyWithoutCategoryInput>
  }

  export type thresholdsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: thresholdsWhereUniqueInput
    update: XOR<thresholdsUpdateWithoutCategoryInput, thresholdsUncheckedUpdateWithoutCategoryInput>
    create: XOR<thresholdsCreateWithoutCategoryInput, thresholdsUncheckedCreateWithoutCategoryInput>
  }

  export type thresholdsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: thresholdsWhereUniqueInput
    data: XOR<thresholdsUpdateWithoutCategoryInput, thresholdsUncheckedUpdateWithoutCategoryInput>
  }

  export type thresholdsUpdateManyWithWhereWithoutCategoryInput = {
    where: thresholdsScalarWhereInput
    data: XOR<thresholdsUpdateManyMutationInput, thresholdsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type usersCreateWithoutCardsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutCardsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutCardsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
  }

  export type expensesCreateWithoutCardInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user: usersCreateNestedOneWithoutExpensesInput
    category?: categoriasCreateNestedOneWithoutExpensesInput
    history?: expense_historyCreateNestedManyWithoutExpenseInput
  }

  export type expensesUncheckedCreateWithoutCardInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    category_id?: string | null
    history?: expense_historyUncheckedCreateNestedManyWithoutExpenseInput
  }

  export type expensesCreateOrConnectWithoutCardInput = {
    where: expensesWhereUniqueInput
    create: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput>
  }

  export type expensesCreateManyCardInputEnvelope = {
    data: expensesCreateManyCardInput | expensesCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCardsInput = {
    update: XOR<usersUpdateWithoutCardsInput, usersUncheckedUpdateWithoutCardsInput>
    create: XOR<usersCreateWithoutCardsInput, usersUncheckedCreateWithoutCardsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCardsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCardsInput, usersUncheckedUpdateWithoutCardsInput>
  }

  export type usersUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type expensesUpsertWithWhereUniqueWithoutCardInput = {
    where: expensesWhereUniqueInput
    update: XOR<expensesUpdateWithoutCardInput, expensesUncheckedUpdateWithoutCardInput>
    create: XOR<expensesCreateWithoutCardInput, expensesUncheckedCreateWithoutCardInput>
  }

  export type expensesUpdateWithWhereUniqueWithoutCardInput = {
    where: expensesWhereUniqueInput
    data: XOR<expensesUpdateWithoutCardInput, expensesUncheckedUpdateWithoutCardInput>
  }

  export type expensesUpdateManyWithWhereWithoutCardInput = {
    where: expensesScalarWhereInput
    data: XOR<expensesUpdateManyMutationInput, expensesUncheckedUpdateManyWithoutCardInput>
  }

  export type usersCreateWithoutExpensesInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutExpensesInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutExpensesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutExpensesInput, usersUncheckedCreateWithoutExpensesInput>
  }

  export type cardsCreateWithoutExpensesInput = {
    id?: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
    user: usersCreateNestedOneWithoutCardsInput
  }

  export type cardsUncheckedCreateWithoutExpensesInput = {
    id?: string
    user_id: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
  }

  export type cardsCreateOrConnectWithoutExpensesInput = {
    where: cardsWhereUniqueInput
    create: XOR<cardsCreateWithoutExpensesInput, cardsUncheckedCreateWithoutExpensesInput>
  }

  export type categoriasCreateWithoutExpensesInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    children?: categoriasCreateNestedManyWithoutParentInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutExpensesInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutExpensesInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutExpensesInput, categoriasUncheckedCreateWithoutExpensesInput>
  }

  export type expense_historyCreateWithoutExpenseInput = {
    id?: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
    user: usersCreateNestedOneWithoutExpense_historyInput
  }

  export type expense_historyUncheckedCreateWithoutExpenseInput = {
    id?: string
    user_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type expense_historyCreateOrConnectWithoutExpenseInput = {
    where: expense_historyWhereUniqueInput
    create: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput>
  }

  export type expense_historyCreateManyExpenseInputEnvelope = {
    data: expense_historyCreateManyExpenseInput | expense_historyCreateManyExpenseInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutExpensesInput = {
    update: XOR<usersUpdateWithoutExpensesInput, usersUncheckedUpdateWithoutExpensesInput>
    create: XOR<usersCreateWithoutExpensesInput, usersUncheckedCreateWithoutExpensesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutExpensesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutExpensesInput, usersUncheckedUpdateWithoutExpensesInput>
  }

  export type usersUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type cardsUpsertWithoutExpensesInput = {
    update: XOR<cardsUpdateWithoutExpensesInput, cardsUncheckedUpdateWithoutExpensesInput>
    create: XOR<cardsCreateWithoutExpensesInput, cardsUncheckedCreateWithoutExpensesInput>
    where?: cardsWhereInput
  }

  export type cardsUpdateToOneWithWhereWithoutExpensesInput = {
    where?: cardsWhereInput
    data: XOR<cardsUpdateWithoutExpensesInput, cardsUncheckedUpdateWithoutExpensesInput>
  }

  export type cardsUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    user?: usersUpdateOneRequiredWithoutCardsNestedInput
  }

  export type cardsUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoriasUpsertWithoutExpensesInput = {
    update: XOR<categoriasUpdateWithoutExpensesInput, categoriasUncheckedUpdateWithoutExpensesInput>
    create: XOR<categoriasCreateWithoutExpensesInput, categoriasUncheckedCreateWithoutExpensesInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutExpensesInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutExpensesInput, categoriasUncheckedUpdateWithoutExpensesInput>
  }

  export type categoriasUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type expense_historyUpsertWithWhereUniqueWithoutExpenseInput = {
    where: expense_historyWhereUniqueInput
    update: XOR<expense_historyUpdateWithoutExpenseInput, expense_historyUncheckedUpdateWithoutExpenseInput>
    create: XOR<expense_historyCreateWithoutExpenseInput, expense_historyUncheckedCreateWithoutExpenseInput>
  }

  export type expense_historyUpdateWithWhereUniqueWithoutExpenseInput = {
    where: expense_historyWhereUniqueInput
    data: XOR<expense_historyUpdateWithoutExpenseInput, expense_historyUncheckedUpdateWithoutExpenseInput>
  }

  export type expense_historyUpdateManyWithWhereWithoutExpenseInput = {
    where: expense_historyScalarWhereInput
    data: XOR<expense_historyUpdateManyMutationInput, expense_historyUncheckedUpdateManyWithoutExpenseInput>
  }

  export type usersCreateWithoutExpense_historyInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutExpense_historyInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutExpense_historyInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutExpense_historyInput, usersUncheckedCreateWithoutExpense_historyInput>
  }

  export type expensesCreateWithoutHistoryInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user: usersCreateNestedOneWithoutExpensesInput
    card?: cardsCreateNestedOneWithoutExpensesInput
    category?: categoriasCreateNestedOneWithoutExpensesInput
  }

  export type expensesUncheckedCreateWithoutHistoryInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    card_id?: string | null
    category_id?: string | null
  }

  export type expensesCreateOrConnectWithoutHistoryInput = {
    where: expensesWhereUniqueInput
    create: XOR<expensesCreateWithoutHistoryInput, expensesUncheckedCreateWithoutHistoryInput>
  }

  export type usersUpsertWithoutExpense_historyInput = {
    update: XOR<usersUpdateWithoutExpense_historyInput, usersUncheckedUpdateWithoutExpense_historyInput>
    create: XOR<usersCreateWithoutExpense_historyInput, usersUncheckedCreateWithoutExpense_historyInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutExpense_historyInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutExpense_historyInput, usersUncheckedUpdateWithoutExpense_historyInput>
  }

  export type usersUpdateWithoutExpense_historyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutExpense_historyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type expensesUpsertWithoutHistoryInput = {
    update: XOR<expensesUpdateWithoutHistoryInput, expensesUncheckedUpdateWithoutHistoryInput>
    create: XOR<expensesCreateWithoutHistoryInput, expensesUncheckedCreateWithoutHistoryInput>
    where?: expensesWhereInput
  }

  export type expensesUpdateToOneWithWhereWithoutHistoryInput = {
    where?: expensesWhereInput
    data: XOR<expensesUpdateWithoutHistoryInput, expensesUncheckedUpdateWithoutHistoryInput>
  }

  export type expensesUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutExpensesNestedInput
    card?: cardsUpdateOneWithoutExpensesNestedInput
    category?: categoriasUpdateOneWithoutExpensesNestedInput
  }

  export type expensesUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateWithoutIncomesInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutIncomesInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutIncomesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIncomesInput, usersUncheckedCreateWithoutIncomesInput>
  }

  export type categoriasCreateWithoutIncomesInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    children?: categoriasCreateNestedManyWithoutParentInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutIncomesInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutIncomesInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutIncomesInput, categoriasUncheckedCreateWithoutIncomesInput>
  }

  export type usersUpsertWithoutIncomesInput = {
    update: XOR<usersUpdateWithoutIncomesInput, usersUncheckedUpdateWithoutIncomesInput>
    create: XOR<usersCreateWithoutIncomesInput, usersUncheckedCreateWithoutIncomesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutIncomesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutIncomesInput, usersUncheckedUpdateWithoutIncomesInput>
  }

  export type usersUpdateWithoutIncomesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutIncomesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type categoriasUpsertWithoutIncomesInput = {
    update: XOR<categoriasUpdateWithoutIncomesInput, categoriasUncheckedUpdateWithoutIncomesInput>
    create: XOR<categoriasCreateWithoutIncomesInput, categoriasUncheckedCreateWithoutIncomesInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutIncomesInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutIncomesInput, categoriasUncheckedUpdateWithoutIncomesInput>
  }

  export type categoriasUpdateWithoutIncomesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutIncomesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type usersCreateWithoutInvestmentsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
    thresholds?: thresholdsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutInvestmentsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
    thresholds?: thresholdsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutInvestmentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutInvestmentsInput, usersUncheckedCreateWithoutInvestmentsInput>
  }

  export type usersUpsertWithoutInvestmentsInput = {
    update: XOR<usersUpdateWithoutInvestmentsInput, usersUncheckedUpdateWithoutInvestmentsInput>
    create: XOR<usersCreateWithoutInvestmentsInput, usersUncheckedCreateWithoutInvestmentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutInvestmentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutInvestmentsInput, usersUncheckedUpdateWithoutInvestmentsInput>
  }

  export type usersUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutThresholdsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesCreateNestedManyWithoutUserInput
    incomes?: incomesCreateNestedManyWithoutUserInput
    investments?: investimentosCreateNestedManyWithoutUserInput
    categorias?: categoriasCreateNestedManyWithoutUserInput
    cards?: cardsCreateNestedManyWithoutUserInput
    expense_history?: expense_historyCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutThresholdsInput = {
    id?: string
    nome: string
    email: string
    password: string
    currency?: string
    expenses?: expensesUncheckedCreateNestedManyWithoutUserInput
    incomes?: incomesUncheckedCreateNestedManyWithoutUserInput
    investments?: investimentosUncheckedCreateNestedManyWithoutUserInput
    categorias?: categoriasUncheckedCreateNestedManyWithoutUserInput
    cards?: cardsUncheckedCreateNestedManyWithoutUserInput
    expense_history?: expense_historyUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutThresholdsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutThresholdsInput, usersUncheckedCreateWithoutThresholdsInput>
  }

  export type categoriasCreateWithoutThresholdsInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user: usersCreateNestedOneWithoutCategoriasInput
    parent?: categoriasCreateNestedOneWithoutChildrenInput
    children?: categoriasCreateNestedManyWithoutParentInput
    expenses?: expensesCreateNestedManyWithoutCategoryInput
    incomes?: incomesCreateNestedManyWithoutCategoryInput
  }

  export type categoriasUncheckedCreateWithoutThresholdsInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
    user_id: string
    children?: categoriasUncheckedCreateNestedManyWithoutParentInput
    expenses?: expensesUncheckedCreateNestedManyWithoutCategoryInput
    incomes?: incomesUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriasCreateOrConnectWithoutThresholdsInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutThresholdsInput, categoriasUncheckedCreateWithoutThresholdsInput>
  }

  export type usersUpsertWithoutThresholdsInput = {
    update: XOR<usersUpdateWithoutThresholdsInput, usersUncheckedUpdateWithoutThresholdsInput>
    create: XOR<usersCreateWithoutThresholdsInput, usersUncheckedCreateWithoutThresholdsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutThresholdsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutThresholdsInput, usersUncheckedUpdateWithoutThresholdsInput>
  }

  export type usersUpdateWithoutThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUpdateManyWithoutUserNestedInput
    incomes?: incomesUpdateManyWithoutUserNestedInput
    investments?: investimentosUpdateManyWithoutUserNestedInput
    categorias?: categoriasUpdateManyWithoutUserNestedInput
    cards?: cardsUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    expenses?: expensesUncheckedUpdateManyWithoutUserNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutUserNestedInput
    investments?: investimentosUncheckedUpdateManyWithoutUserNestedInput
    categorias?: categoriasUncheckedUpdateManyWithoutUserNestedInput
    cards?: cardsUncheckedUpdateManyWithoutUserNestedInput
    expense_history?: expense_historyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type categoriasUpsertWithoutThresholdsInput = {
    update: XOR<categoriasUpdateWithoutThresholdsInput, categoriasUncheckedUpdateWithoutThresholdsInput>
    create: XOR<categoriasCreateWithoutThresholdsInput, categoriasUncheckedCreateWithoutThresholdsInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutThresholdsInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutThresholdsInput, categoriasUncheckedUpdateWithoutThresholdsInput>
  }

  export type categoriasUpdateWithoutThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type expensesCreateManyUserInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    card_id?: string | null
    category_id?: string | null
  }

  export type incomesCreateManyUserInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    category_id?: string | null
  }

  export type investimentosCreateManyUserInput = {
    id?: string
    tipo: string
    nome: string
    quantidade: number
    descricao?: string | null
    data: Date | string
  }

  export type categoriasCreateManyUserInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    parent_id?: string | null
  }

  export type cardsCreateManyUserInput = {
    id?: string
    nome: string
    tipo: string
    numero: string
    cor: string
    limite: number
    dia_vencimento?: number | null
  }

  export type expense_historyCreateManyUserInput = {
    id?: string
    expense_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type thresholdsCreateManyUserInput = {
    id?: string
    category_id: string
    valor: number
  }

  export type expensesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    card?: cardsUpdateOneWithoutExpensesNestedInput
    category?: categoriasUpdateOneWithoutExpensesNestedInput
    history?: expense_historyUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    history?: expense_historyUncheckedUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type incomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    category?: categoriasUpdateOneWithoutIncomesNestedInput
  }

  export type incomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type incomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type investimentosUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type investimentosUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type investimentosUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriasUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent?: categoriasUpdateOneWithoutChildrenNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cardsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: expensesUpdateManyWithoutCardNestedInput
  }

  export type cardsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: expensesUncheckedUpdateManyWithoutCardNestedInput
  }

  export type cardsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    limite?: FloatFieldUpdateOperationsInput | number
    dia_vencimento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type expense_historyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    expense?: expensesUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type expense_historyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expense_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type expense_historyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expense_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type thresholdsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    category?: categoriasUpdateOneRequiredWithoutThresholdsNestedInput
  }

  export type thresholdsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type thresholdsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type categoriasCreateManyParentInput = {
    id?: string
    nome: string
    cor: string
    tipo: string
    user_id: string
  }

  export type expensesCreateManyCategoryInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    card_id?: string | null
  }

  export type incomesCreateManyCategoryInput = {
    id?: string
    tipo: string
    quantidade: number
    nota?: string | null
    data: Date | string
    fonte: string
    user_id: string
  }

  export type thresholdsCreateManyCategoryInput = {
    id?: string
    user_id: string
    valor: number
  }

  export type categoriasUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutCategoriasNestedInput
    children?: categoriasUpdateManyWithoutParentNestedInput
    expenses?: expensesUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    children?: categoriasUncheckedUpdateManyWithoutParentNestedInput
    expenses?: expensesUncheckedUpdateManyWithoutCategoryNestedInput
    incomes?: incomesUncheckedUpdateManyWithoutCategoryNestedInput
    thresholds?: thresholdsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriasUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type expensesUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutExpensesNestedInput
    card?: cardsUpdateOneWithoutExpensesNestedInput
    history?: expense_historyUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
    history?: expense_historyUncheckedUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    card_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type incomesUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutIncomesNestedInput
  }

  export type incomesUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type incomesUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    nota?: NullableStringFieldUpdateOperationsInput | string | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    fonte?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type thresholdsUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    user?: usersUpdateOneRequiredWithoutThresholdsNestedInput
  }

  export type thresholdsUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type thresholdsUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type expensesCreateManyCardInput = {
    id?: string
    metodo_pagamento: string
    tipo: string
    quantidade: number
    fixo?: boolean
    data: Date | string
    parcelas?: number | null
    frequencia?: string | null
    user_id: string
    category_id?: string | null
  }

  export type expensesUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user?: usersUpdateOneRequiredWithoutExpensesNestedInput
    category?: categoriasUpdateOneWithoutExpensesNestedInput
    history?: expense_historyUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    history?: expense_historyUncheckedUpdateManyWithoutExpenseNestedInput
  }

  export type expensesUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    metodo_pagamento?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    quantidade?: FloatFieldUpdateOperationsInput | number
    fixo?: BoolFieldUpdateOperationsInput | boolean
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelas?: NullableIntFieldUpdateOperationsInput | number | null
    frequencia?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expense_historyCreateManyExpenseInput = {
    id?: string
    user_id: string
    tipo: string
    alteracao: JsonNullValueInput | InputJsonValue
    data_alteracao?: Date | string
  }

  export type expense_historyUpdateWithoutExpenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutExpense_historyNestedInput
  }

  export type expense_historyUncheckedUpdateWithoutExpenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type expense_historyUncheckedUpdateManyWithoutExpenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    alteracao?: JsonNullValueInput | InputJsonValue
    data_alteracao?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}